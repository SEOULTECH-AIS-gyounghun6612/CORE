from collections import namedtuple
from dataclasses import dataclass
from enum import Enum
from typing import Dict, List, Union

if __package__ == "":
    # if this file in local project
    import _base
    import _cv2
    import _numpy
    import _error as _e

else:
    # if this file in package folder
    from . import _base
    from . import _cv2
    from . import _numpy
    from . import _error as _e


# Set constant
DEBUG = False
_error = _e.Custom_error(
    module_name="ais_custom_utils_v 2.x",
    file_name="_label.py")

label = namedtuple(
    "label",
    ["id", "train_id", "categoryId", "hasInstances", "ignoreInEval", "color", "name"])


class file_style(Enum):
    COLORMAP = 0
    ANNOTATION = 1
    ZIP = 2


class file_process():
    """
    make data list
    """
    class file_basement():
        def __init__(self, data_root_directory: str, data_exts: List[List[str]], is_sequence: List[List[bool]]) -> None:
            self.data_root = _base.directory._slash_check(data_root_directory)
            self.data_exts = data_exts
            self.data_sequence = is_sequence
            self.data_list = []

        def get_len(self):
            return len(self.data_list)

        def pick_data(self, item_num) -> List[List]:
            return self.data_list[item_num]

        def get_file_list(self, data_paths: List[List[str]]):
            pass

    class file_from_directory(file_basement):
        """
        from image file
        """
        def __init__(self, data_root_directory: str, data_exts: List[List[str]], is_sequence: List[List[bool]]) -> None:
            """
            Args:
                data_root_directory  :
                data_ext        :
                file_structure  :
            Returns:
                None
            """
            super().__init__(data_root_directory, data_exts, is_sequence)

        def get_list_in(self, directory: str, ext: str, is_sequence: bool) -> List:
            if is_sequence:
                file_list = [_base.directory._inside_search(_search_dir, ext=ext) for _search_dir in _base.directory._inside_search(self.data_root + directory)]
            else:
                file_list = _base.directory._inside_search(self.data_root + directory, ext=ext)
            return file_list

        def get_file_list(self, data_paths: List[List[str]]):
            # make data list
            # data_paths -> [input -> [data path 0, data path 1, data path 2 ...], label -> [data path 0, data path 1, data path 2 ...]]
            # data_exts -> [input -> [data ext 0, data ext 1, data ext 2 ...], label -> [data ext 0, data ext 1, data ext 2 ...]]

            # outer => pick input or label parameters
            # inter => make data list, that exist in file path. used function zip(), this data re-group about each data 0 channel
            #          ([datas in path 0, datas in path 1, datas in path 2, ...]) --zip()--> ([data 0 in each path, data 1 in each path, data 2 in each path, ...])

            data_list = []
            for _paths, _exts, _squences in zip(data_paths, self.data_exts, self.data_sequence):
                temp_holder = []
                for _path, _ext, _sq in zip(_paths, _exts, _squences):
                    temp_holder.append(self.get_list_in(_path, _ext, _sq))
                data_list.append(zip(*temp_holder))

            self.data_list = list(zip(*data_list))

            return self.data_list

    class file_from_annotation_file(file_basement):
        """
        from image file
        """
        ...


class label_style(Enum):
    CLASSIFICATION = 0
    SEG = 1
    DETECTION = 1


class labels():
    @dataclass
    class classification_label():
        ID: int
        Train_ID: int
        Cateogry_ID: str
        Ignore_in_eval: bool
        Class_name: str
        name: str

    @dataclass
    class seg_label():
        ...


class label_process():
    class label_basement():
        Lable_name: str = "basement"
        Directory: Dict[label_style, str] = {}
        Label_list: Dict[label_style, List[label]] = {}
        Label_category: Dict[label_style, List[str]] = {}

        def __init__(self, label_style: label_style, file_style: file_style, data_size: List[int]) -> None:
            self.label_style = label_style
            self.file_style = file_style

        def set_learning_mode(self, learning_mode: str):
            self.learning_mode = learning_mode

        def get_data_directory(self) -> str:
            ...

        def work(self, data_list, index):
            ...

    class Imagenet_1k(label_basement):
        Directory: Dict[label_style, str] = {
            label_style.CLASSIFICATION: "ILSVRC/2012/{}/"
        }
        Label_list: Dict[label_style, List[labels.classification_label]] = {
            label_style.CLASSIFICATION: [
                labels.classification_label(0x000, 0x000, 0x000, False, "n01440764", "tench"),
                labels.classification_label(0x001, 0x001, 0x001, False, "n01443537", "goldfish"),
                labels.classification_label(0x002, 0x002, 0x002, False, "n01484850", "great_white_shark"),
                labels.classification_label(0x003, 0x003, 0x003, False, "n01491361", "tiger_shark"),
                labels.classification_label(0x004, 0x004, 0x004, False, "n01494475", "hammerhead"),
                labels.classification_label(0x005, 0x005, 0x005, False, "n01496331", "electric_ray"),
                labels.classification_label(0x006, 0x006, 0x006, False, "n01498041", "stingray"),
                labels.classification_label(0x007, 0x007, 0x007, False, "n01514668", "cock"),
                labels.classification_label(0x008, 0x008, 0x008, False, "n01514859", "hen"),
                labels.classification_label(0x009, 0x009, 0x009, False, "n01518878", "ostrich"),
                labels.classification_label(0x00A, 0x00A, 0x00A, False, "n01530575", "brambling"),
                labels.classification_label(0x00B, 0x00B, 0x00B, False, "n01531178", "goldfinch"),
                labels.classification_label(0x00C, 0x00C, 0x00C, False, "n01532829", "house_finch"),
                labels.classification_label(0x00D, 0x00D, 0x00D, False, "n01534433", "junco"),
                labels.classification_label(0x00E, 0x00E, 0x00E, False, "n01537544", "indigo_bunting"),
                labels.classification_label(0x00F, 0x00F, 0x00F, False, "n01558993", "robin"),
                labels.classification_label(0x010, 0x010, 0x010, False, "n01560419", "bulbul"),
                labels.classification_label(0x011, 0x011, 0x011, False, "n01580077", "jay"),
                labels.classification_label(0x012, 0x012, 0x012, False, "n01582220", "magpie"),
                labels.classification_label(0x013, 0x013, 0x013, False, "n01592084", "chickadee"),
                labels.classification_label(0x014, 0x014, 0x014, False, "n01601694", "water_ouzel"),
                labels.classification_label(0x015, 0x015, 0x015, False, "n01608432", "kite"),
                labels.classification_label(0x016, 0x016, 0x016, False, "n01614925", "bald_eagle"),
                labels.classification_label(0x017, 0x017, 0x017, False, "n01616318", "vulture"),
                labels.classification_label(0x018, 0x018, 0x018, False, "n01622779", "great_grey_owl"),
                labels.classification_label(0x019, 0x019, 0x019, False, "n01629819", "European_fire_salamander"),
                labels.classification_label(0x01A, 0x01A, 0x01A, False, "n01630670", "common_newt"),
                labels.classification_label(0x01B, 0x01B, 0x01B, False, "n01631663", "eft"),
                labels.classification_label(0x01C, 0x01C, 0x01C, False, "n01632458", "spotted_salamander"),
                labels.classification_label(0x01D, 0x01D, 0x01D, False, "n01632777", "axolotl"),
                labels.classification_label(0x01E, 0x01E, 0x01E, False, "n01641577", "bullfrog"),
                labels.classification_label(0x01F, 0x01F, 0x01F, False, "n01644373", "tree_frog"),
                labels.classification_label(0x020, 0x020, 0x020, False, "n01644900", "tailed_frog"),
                labels.classification_label(0x021, 0x021, 0x021, False, "n01664065", "loggerhead"),
                labels.classification_label(0x022, 0x022, 0x022, False, "n01665541", "leatherback_turtle"),
                labels.classification_label(0x023, 0x023, 0x023, False, "n01667114", "mud_turtle"),
                labels.classification_label(0x024, 0x024, 0x024, False, "n01667778", "terrapin"),
                labels.classification_label(0x025, 0x025, 0x025, False, "n01669191", "box_turtle"),
                labels.classification_label(0x026, 0x026, 0x026, False, "n01675722", "banded_gecko"),
                labels.classification_label(0x027, 0x027, 0x027, False, "n01677366", "common_iguana"),
                labels.classification_label(0x028, 0x028, 0x028, False, "n01682714", "American_chameleon"),
                labels.classification_label(0x029, 0x029, 0x029, False, "n01685808", "whiptail"),
                labels.classification_label(0x02A, 0x02A, 0x02A, False, "n01687978", "agama"),
                labels.classification_label(0x02B, 0x02B, 0x02B, False, "n01688243", "frilled_lizard"),
                labels.classification_label(0x02C, 0x02C, 0x02C, False, "n01689811", "alligator_lizard"),
                labels.classification_label(0x02D, 0x02D, 0x02D, False, "n01692333", "Gila_monster"),
                labels.classification_label(0x02E, 0x02E, 0x02E, False, "n01693334", "green_lizard"),
                labels.classification_label(0x02F, 0x02F, 0x02F, False, "n01694178", "African_chameleon"),
                labels.classification_label(0x030, 0x030, 0x030, False, "n01695060", "Komodo_dragon"),
                labels.classification_label(0x031, 0x031, 0x031, False, "n01697457", "African_crocodile"),
                labels.classification_label(0x032, 0x032, 0x032, False, "n01698640", "American_alligator"),
                labels.classification_label(0x033, 0x033, 0x033, False, "n01704323", "triceratops"),
                labels.classification_label(0x034, 0x034, 0x034, False, "n01728572", "thunder_snake"),
                labels.classification_label(0x035, 0x035, 0x035, False, "n01728920", "ringneck_snake"),
                labels.classification_label(0x036, 0x036, 0x036, False, "n01729322", "hognose_snake"),
                labels.classification_label(0x037, 0x037, 0x037, False, "n01729977", "green_snake"),
                labels.classification_label(0x038, 0x038, 0x038, False, "n01734418", "king_snake"),
                labels.classification_label(0x039, 0x039, 0x039, False, "n01735189", "garter_snake"),
                labels.classification_label(0x03A, 0x03A, 0x03A, False, "n01737021", "water_snake"),
                labels.classification_label(0x03B, 0x03B, 0x03B, False, "n01739381", "vine_snake"),
                labels.classification_label(0x03C, 0x03C, 0x03C, False, "n01740131", "night_snake"),
                labels.classification_label(0x03D, 0x03D, 0x03D, False, "n01742172", "boa_constrictor"),
                labels.classification_label(0x03E, 0x03E, 0x03E, False, "n01744401", "rock_python"),
                labels.classification_label(0x03F, 0x03F, 0x03F, False, "n01748264", "Indian_cobra"),
                labels.classification_label(0x040, 0x040, 0x040, False, "n01749939", "green_mamba"),
                labels.classification_label(0x041, 0x041, 0x041, False, "n01751748", "sea_snake"),
                labels.classification_label(0x042, 0x042, 0x042, False, "n01753488", "horned_viper"),
                labels.classification_label(0x043, 0x043, 0x043, False, "n01755581", "diamondback"),
                labels.classification_label(0x044, 0x044, 0x044, False, "n01756291", "sidewinder"),
                labels.classification_label(0x045, 0x045, 0x045, False, "n01768244", "trilobite"),
                labels.classification_label(0x046, 0x046, 0x046, False, "n01770081", "harvestman"),
                labels.classification_label(0x047, 0x047, 0x047, False, "n01770393", "scorpion"),
                labels.classification_label(0x048, 0x048, 0x048, False, "n01773157", "black_and_gold_garden_spider"),
                labels.classification_label(0x049, 0x049, 0x049, False, "n01773549", "barn_spider"),
                labels.classification_label(0x04A, 0x04A, 0x04A, False, "n01773797", "garden_spider"),
                labels.classification_label(0x04B, 0x04B, 0x04B, False, "n01774384", "black_widow"),
                labels.classification_label(0x04C, 0x04C, 0x04C, False, "n01774750", "tarantula"),
                labels.classification_label(0x04D, 0x04D, 0x04D, False, "n01775062", "wolf_spider"),
                labels.classification_label(0x04E, 0x04E, 0x04E, False, "n01776313", "tick"),
                labels.classification_label(0x04F, 0x04F, 0x04F, False, "n01784675", "centipede"),
                labels.classification_label(0x050, 0x050, 0x050, False, "n01795545", "black_grouse"),
                labels.classification_label(0x051, 0x051, 0x051, False, "n01796340", "ptarmigan"),
                labels.classification_label(0x052, 0x052, 0x052, False, "n01797886", "ruffed_grouse"),
                labels.classification_label(0x053, 0x053, 0x053, False, "n01798484", "prairie_chicken"),
                labels.classification_label(0x054, 0x054, 0x054, False, "n01806143", "peacock"),
                labels.classification_label(0x055, 0x055, 0x055, False, "n01806567", "quail"),
                labels.classification_label(0x056, 0x056, 0x056, False, "n01807496", "partridge"),
                labels.classification_label(0x057, 0x057, 0x057, False, "n01817953", "African_grey"),
                labels.classification_label(0x058, 0x058, 0x058, False, "n01818515", "macaw"),
                labels.classification_label(0x059, 0x059, 0x059, False, "n01819313", "sulphur-crested_cockatoo"),
                labels.classification_label(0x05A, 0x05A, 0x05A, False, "n01820546", "lorikeet"),
                labels.classification_label(0x05B, 0x05B, 0x05B, False, "n01824575", "coucal"),
                labels.classification_label(0x05C, 0x05C, 0x05C, False, "n01828970", "bee_eater"),
                labels.classification_label(0x05D, 0x05D, 0x05D, False, "n01829413", "hornbill"),
                labels.classification_label(0x05E, 0x05E, 0x05E, False, "n01833805", "hummingbird"),
                labels.classification_label(0x05F, 0x05F, 0x05F, False, "n01843065", "jacamar"),
                labels.classification_label(0x060, 0x060, 0x060, False, "n01843383", "toucan"),
                labels.classification_label(0x061, 0x061, 0x061, False, "n01847000", "drake"),
                labels.classification_label(0x062, 0x062, 0x062, False, "n01855032", "red-breasted_merganser"),
                labels.classification_label(0x063, 0x063, 0x063, False, "n01855672", "goose"),
                labels.classification_label(0x064, 0x064, 0x064, False, "n01860187", "black_swan"),
                labels.classification_label(0x065, 0x065, 0x065, False, "n01871265", "tusker"),
                labels.classification_label(0x066, 0x066, 0x066, False, "n01872401", "echidna"),
                labels.classification_label(0x067, 0x067, 0x067, False, "n01873310", "platypus"),
                labels.classification_label(0x068, 0x068, 0x068, False, "n01877812", "wallaby"),
                labels.classification_label(0x069, 0x069, 0x069, False, "n01882714", "koala"),
                labels.classification_label(0x06A, 0x06A, 0x06A, False, "n01883070", "wombat"),
                labels.classification_label(0x06B, 0x06B, 0x06B, False, "n01910747", "jellyfish"),
                labels.classification_label(0x06C, 0x06C, 0x06C, False, "n01914609", "sea_anemone"),
                labels.classification_label(0x06D, 0x06D, 0x06D, False, "n01917289", "brain_coral"),
                labels.classification_label(0x06E, 0x06E, 0x06E, False, "n01924916", "flatworm"),
                labels.classification_label(0x06F, 0x06F, 0x06F, False, "n01930112", "nematode"),
                labels.classification_label(0x070, 0x070, 0x070, False, "n01943899", "conch"),
                labels.classification_label(0x071, 0x071, 0x071, False, "n01944390", "snail"),
                labels.classification_label(0x072, 0x072, 0x072, False, "n01945685", "slug"),
                labels.classification_label(0x073, 0x073, 0x073, False, "n01950731", "sea_slug"),
                labels.classification_label(0x074, 0x074, 0x074, False, "n01955084", "chiton"),
                labels.classification_label(0x075, 0x075, 0x075, False, "n01968897", "chambered_nautilus"),
                labels.classification_label(0x076, 0x076, 0x076, False, "n01978287", "Dungeness_crab"),
                labels.classification_label(0x077, 0x077, 0x077, False, "n01978455", "rock_crab"),
                labels.classification_label(0x078, 0x078, 0x078, False, "n01980166", "fiddler_crab"),
                labels.classification_label(0x079, 0x079, 0x079, False, "n01981276", "king_crab"),
                labels.classification_label(0x07A, 0x07A, 0x07A, False, "n01983481", "American_lobster"),
                labels.classification_label(0x07B, 0x07B, 0x07B, False, "n01984695", "spiny_lobster"),
                labels.classification_label(0x07C, 0x07C, 0x07C, False, "n01985128", "crayfish"),
                labels.classification_label(0x07D, 0x07D, 0x07D, False, "n01986214", "hermit_crab"),
                labels.classification_label(0x07E, 0x07E, 0x07E, False, "n01990800", "isopod"),
                labels.classification_label(0x07F, 0x07F, 0x07F, False, "n02002556", "white_stork"),
                labels.classification_label(0x080, 0x080, 0x080, False, "n02002724", "black_stork"),
                labels.classification_label(0x081, 0x081, 0x081, False, "n02006656", "spoonbill"),
                labels.classification_label(0x082, 0x082, 0x082, False, "n02007558", "flamingo"),
                labels.classification_label(0x083, 0x083, 0x083, False, "n02009229", "little_blue_heron"),
                labels.classification_label(0x084, 0x084, 0x084, False, "n02009912", "American_egret"),
                labels.classification_label(0x085, 0x085, 0x085, False, "n02011460", "bittern"),
                labels.classification_label(0x086, 0x086, 0x086, False, "n02012849", "crane"),
                labels.classification_label(0x087, 0x087, 0x087, False, "n02013706", "limpkin"),
                labels.classification_label(0x088, 0x088, 0x088, False, "n02017213", "European_gallinule"),
                labels.classification_label(0x089, 0x089, 0x089, False, "n02018207", "American_coot"),
                labels.classification_label(0x08A, 0x08A, 0x08A, False, "n02018795", "bustard"),
                labels.classification_label(0x08B, 0x08B, 0x08B, False, "n02025239", "ruddy_turnstone"),
                labels.classification_label(0x08C, 0x08C, 0x08C, False, "n02027492", "red-backed_sandpiper"),
                labels.classification_label(0x08D, 0x08D, 0x08D, False, "n02028035", "redshank"),
                labels.classification_label(0x08E, 0x08E, 0x08E, False, "n02033041", "dowitcher"),
                labels.classification_label(0x08F, 0x08F, 0x08F, False, "n02037110", "oystercatcher"),
                labels.classification_label(0x090, 0x090, 0x090, False, "n02051845", "pelican"),
                labels.classification_label(0x091, 0x091, 0x091, False, "n02056570", "king_penguin"),
                labels.classification_label(0x092, 0x092, 0x092, False, "n02058221", "albatross"),
                labels.classification_label(0x093, 0x093, 0x093, False, "n02066245", "grey_whale"),
                labels.classification_label(0x094, 0x094, 0x094, False, "n02071294", "killer_whale"),
                labels.classification_label(0x095, 0x095, 0x095, False, "n02074367", "dugong"),
                labels.classification_label(0x096, 0x096, 0x096, False, "n02077923", "sea_lion"),
                labels.classification_label(0x097, 0x097, 0x097, False, "n02085620", "Chihuahua"),
                labels.classification_label(0x098, 0x098, 0x098, False, "n02085782", "Japanese_spaniel"),
                labels.classification_label(0x099, 0x099, 0x099, False, "n02085936", "Maltese_dog"),
                labels.classification_label(0x09A, 0x09A, 0x09A, False, "n02086079", "Pekinese"),
                labels.classification_label(0x09B, 0x09B, 0x09B, False, "n02086240", "Shih-Tzu"),
                labels.classification_label(0x09C, 0x09C, 0x09C, False, "n02086646", "Blenheim_spaniel"),
                labels.classification_label(0x09D, 0x09D, 0x09D, False, "n02086910", "papillon"),
                labels.classification_label(0x09E, 0x09E, 0x09E, False, "n02087046", "toy_terrier"),
                labels.classification_label(0x09F, 0x09F, 0x09F, False, "n02087394", "Rhodesian_ridgeback"),
                labels.classification_label(0x0A0, 0x0A0, 0x0A0, False, "n02088094", "Afghan_hound"),
                labels.classification_label(0x0A1, 0x0A1, 0x0A1, False, "n02088238", "basset"),
                labels.classification_label(0x0A2, 0x0A2, 0x0A2, False, "n02088364", "beagle"),
                labels.classification_label(0x0A3, 0x0A3, 0x0A3, False, "n02088466", "bloodhound"),
                labels.classification_label(0x0A4, 0x0A4, 0x0A4, False, "n02088632", "bluetick"),
                labels.classification_label(0x0A5, 0x0A5, 0x0A5, False, "n02089078", "black-and-tan_coonhound"),
                labels.classification_label(0x0A6, 0x0A6, 0x0A6, False, "n02089867", "Walker_hound"),
                labels.classification_label(0x0A7, 0x0A7, 0x0A7, False, "n02089973", "English_foxhound"),
                labels.classification_label(0x0A8, 0x0A8, 0x0A8, False, "n02090379", "redbone"),
                labels.classification_label(0x0A9, 0x0A9, 0x0A9, False, "n02090622", "borzoi"),
                labels.classification_label(0x0AA, 0x0AA, 0x0AA, False, "n02090721", "Irish_wolfhound"),
                labels.classification_label(0x0AB, 0x0AB, 0x0AB, False, "n02091032", "Italian_greyhound"),
                labels.classification_label(0x0AC, 0x0AC, 0x0AC, False, "n02091134", "whippet"),
                labels.classification_label(0x0AD, 0x0AD, 0x0AD, False, "n02091244", "Ibizan_hound"),
                labels.classification_label(0x0AE, 0x0AE, 0x0AE, False, "n02091467", "Norwegian_elkhound"),
                labels.classification_label(0x0AF, 0x0AF, 0x0AF, False, "n02091635", "otterhound"),
                labels.classification_label(0x0B0, 0x0B0, 0x0B0, False, "n02091831", "Saluki"),
                labels.classification_label(0x0B1, 0x0B1, 0x0B1, False, "n02092002", "Scottish_deerhound"),
                labels.classification_label(0x0B2, 0x0B2, 0x0B2, False, "n02092339", "Weimaraner"),
                labels.classification_label(0x0B3, 0x0B3, 0x0B3, False, "n02093256", "Staffordshire_bullterrier"),
                labels.classification_label(0x0B4, 0x0B4, 0x0B4, False, "n02093428", "American_Staffordshire_terrier"),
                labels.classification_label(0x0B5, 0x0B5, 0x0B5, False, "n02093647", "Bedlington_terrier"),
                labels.classification_label(0x0B6, 0x0B6, 0x0B6, False, "n02093754", "Border_terrier"),
                labels.classification_label(0x0B7, 0x0B7, 0x0B7, False, "n02093859", "Kerry_blue_terrier"),
                labels.classification_label(0x0B8, 0x0B8, 0x0B8, False, "n02093991", "Irish_terrier"),
                labels.classification_label(0x0B9, 0x0B9, 0x0B9, False, "n02094114", "Norfolk_terrier"),
                labels.classification_label(0x0BA, 0x0BA, 0x0BA, False, "n02094258", "Norwich_terrier"),
                labels.classification_label(0x0BB, 0x0BB, 0x0BB, False, "n02094433", "Yorkshire_terrier"),
                labels.classification_label(0x0BC, 0x0BC, 0x0BC, False, "n02095314", "wire-haired_fox_terrier"),
                labels.classification_label(0x0BD, 0x0BD, 0x0BD, False, "n02095570", "Lakeland_terrier"),
                labels.classification_label(0x0BE, 0x0BE, 0x0BE, False, "n02095889", "Sealyham_terrier"),
                labels.classification_label(0x0BF, 0x0BF, 0x0BF, False, "n02096051", "Airedale"),
                labels.classification_label(0x0C0, 0x0C0, 0x0C0, False, "n02096177", "cairn"),
                labels.classification_label(0x0C1, 0x0C1, 0x0C1, False, "n02096294", "Australian_terrier"),
                labels.classification_label(0x0C2, 0x0C2, 0x0C2, False, "n02096437", "Dandie_Dinmont"),
                labels.classification_label(0x0C3, 0x0C3, 0x0C3, False, "n02096585", "Boston_bull"),
                labels.classification_label(0x0C4, 0x0C4, 0x0C4, False, "n02097047", "miniature_schnauzer"),
                labels.classification_label(0x0C5, 0x0C5, 0x0C5, False, "n02097130", "giant_schnauzer"),
                labels.classification_label(0x0C6, 0x0C6, 0x0C6, False, "n02097209", "standard_schnauzer"),
                labels.classification_label(0x0C7, 0x0C7, 0x0C7, False, "n02097298", "Scotch_terrier"),
                labels.classification_label(0x0C8, 0x0C8, 0x0C8, False, "n02097474", "Tibetan_terrier"),
                labels.classification_label(0x0C9, 0x0C9, 0x0C9, False, "n02097658", "silky_terrier"),
                labels.classification_label(0x0CA, 0x0CA, 0x0CA, False, "n02098105", "soft-coated_wheaten_terrier"),
                labels.classification_label(0x0CB, 0x0CB, 0x0CB, False, "n02098286", "West_Highland_white_terrier"),
                labels.classification_label(0x0CC, 0x0CC, 0x0CC, False, "n02098413", "Lhasa"),
                labels.classification_label(0x0CD, 0x0CD, 0x0CD, False, "n02099267", "flat-coated_retriever"),
                labels.classification_label(0x0CE, 0x0CE, 0x0CE, False, "n02099429", "curly-coated_retriever"),
                labels.classification_label(0x0CF, 0x0CF, 0x0CF, False, "n02099601", "golden_retriever"),
                labels.classification_label(0x0D0, 0x0D0, 0x0D0, False, "n02099712", "Labrador_retriever"),
                labels.classification_label(0x0D1, 0x0D1, 0x0D1, False, "n02099849", "Chesapeake_Bay_retriever"),
                labels.classification_label(0x0D2, 0x0D2, 0x0D2, False, "n02100236", "German_short-haired_pointer"),
                labels.classification_label(0x0D3, 0x0D3, 0x0D3, False, "n02100583", "vizsla"),
                labels.classification_label(0x0D4, 0x0D4, 0x0D4, False, "n02100735", "English_setter"),
                labels.classification_label(0x0D5, 0x0D5, 0x0D5, False, "n02100877", "Irish_setter"),
                labels.classification_label(0x0D6, 0x0D6, 0x0D6, False, "n02101006", "Gordon_setter"),
                labels.classification_label(0x0D7, 0x0D7, 0x0D7, False, "n02101388", "Brittany_spaniel"),
                labels.classification_label(0x0D8, 0x0D8, 0x0D8, False, "n02101556", "clumber"),
                labels.classification_label(0x0D9, 0x0D9, 0x0D9, False, "n02102040", "English_springer"),
                labels.classification_label(0x0DA, 0x0DA, 0x0DA, False, "n02102177", "Welsh_springer_spaniel"),
                labels.classification_label(0x0DB, 0x0DB, 0x0DB, False, "n02102318", "cocker_spaniel"),
                labels.classification_label(0x0DC, 0x0DC, 0x0DC, False, "n02102480", "Sussex_spaniel"),
                labels.classification_label(0x0DD, 0x0DD, 0x0DD, False, "n02102973", "Irish_water_spaniel"),
                labels.classification_label(0x0DE, 0x0DE, 0x0DE, False, "n02104029", "kuvasz"),
                labels.classification_label(0x0DF, 0x0DF, 0x0DF, False, "n02104365", "schipperke"),
                labels.classification_label(0x0E0, 0x0E0, 0x0E0, False, "n02105056", "groenendael"),
                labels.classification_label(0x0E1, 0x0E1, 0x0E1, False, "n02105162", "malinois"),
                labels.classification_label(0x0E2, 0x0E2, 0x0E2, False, "n02105251", "briard"),
                labels.classification_label(0x0E3, 0x0E3, 0x0E3, False, "n02105412", "kelpie"),
                labels.classification_label(0x0E4, 0x0E4, 0x0E4, False, "n02105505", "komondor"),
                labels.classification_label(0x0E5, 0x0E5, 0x0E5, False, "n02105641", "Old_English_sheepdog"),
                labels.classification_label(0x0E6, 0x0E6, 0x0E6, False, "n02105855", "Shetland_sheepdog"),
                labels.classification_label(0x0E7, 0x0E7, 0x0E7, False, "n02106030", "collie"),
                labels.classification_label(0x0E8, 0x0E8, 0x0E8, False, "n02106166", "Border_collie"),
                labels.classification_label(0x0E9, 0x0E9, 0x0E9, False, "n02106382", "Bouvier_des_Flandres"),
                labels.classification_label(0x0EA, 0x0EA, 0x0EA, False, "n02106550", "Rottweiler"),
                labels.classification_label(0x0EB, 0x0EB, 0x0EB, False, "n02106662", "German_shepherd"),
                labels.classification_label(0x0EC, 0x0EC, 0x0EC, False, "n02107142", "Doberman"),
                labels.classification_label(0x0ED, 0x0ED, 0x0ED, False, "n02107312", "miniature_pinscher"),
                labels.classification_label(0x0EE, 0x0EE, 0x0EE, False, "n02107574", "Greater_Swiss_Mountain_dog"),
                labels.classification_label(0x0EF, 0x0EF, 0x0EF, False, "n02107683", "Bernese_mountain_dog"),
                labels.classification_label(0x0F0, 0x0F0, 0x0F0, False, "n02107908", "Appenzeller"),
                labels.classification_label(0x0F1, 0x0F1, 0x0F1, False, "n02108000", "EntleBucher"),
                labels.classification_label(0x0F2, 0x0F2, 0x0F2, False, "n02108089", "boxer"),
                labels.classification_label(0x0F3, 0x0F3, 0x0F3, False, "n02108422", "bull_mastiff"),
                labels.classification_label(0x0F4, 0x0F4, 0x0F4, False, "n02108551", "Tibetan_mastiff"),
                labels.classification_label(0x0F5, 0x0F5, 0x0F5, False, "n02108915", "French_bulldog"),
                labels.classification_label(0x0F6, 0x0F6, 0x0F6, False, "n02109047", "Great_Dane"),
                labels.classification_label(0x0F7, 0x0F7, 0x0F7, False, "n02109525", "Saint_Bernard"),
                labels.classification_label(0x0F8, 0x0F8, 0x0F8, False, "n02109961", "Eskimo_dog"),
                labels.classification_label(0x0F9, 0x0F9, 0x0F9, False, "n02110063", "malamute"),
                labels.classification_label(0x0FA, 0x0FA, 0x0FA, False, "n02110185", "Siberian_husky"),
                labels.classification_label(0x0FB, 0x0FB, 0x0FB, False, "n02110341", "dalmatian"),
                labels.classification_label(0x0FC, 0x0FC, 0x0FC, False, "n02110627", "affenpinscher"),
                labels.classification_label(0x0FD, 0x0FD, 0x0FD, False, "n02110806", "basenji"),
                labels.classification_label(0x0FE, 0x0FE, 0x0FE, False, "n02110958", "pug"),
                labels.classification_label(0x0FF, 0x0FF, 0x0FF, False, "n02111129", "Leonberg"),
                labels.classification_label(0x100, 0x100, 0x100, False, "n02111277", "Newfoundland"),
                labels.classification_label(0x101, 0x101, 0x101, False, "n02111500", "Great_Pyrenees"),
                labels.classification_label(0x102, 0x102, 0x102, False, "n02111889", "Samoyed"),
                labels.classification_label(0x103, 0x103, 0x103, False, "n02112018", "Pomeranian"),
                labels.classification_label(0x104, 0x104, 0x104, False, "n02112137", "chow"),
                labels.classification_label(0x105, 0x105, 0x105, False, "n02112350", "keeshond"),
                labels.classification_label(0x106, 0x106, 0x106, False, "n02112706", "Brabancon_griffon"),
                labels.classification_label(0x107, 0x107, 0x107, False, "n02113023", "Pembroke"),
                labels.classification_label(0x108, 0x108, 0x108, False, "n02113186", "Cardigan"),
                labels.classification_label(0x109, 0x109, 0x109, False, "n02113624", "toy_poodle"),
                labels.classification_label(0x10A, 0x10A, 0x10A, False, "n02113712", "miniature_poodle"),
                labels.classification_label(0x10B, 0x10B, 0x10B, False, "n02113799", "standard_poodle"),
                labels.classification_label(0x10C, 0x10C, 0x10C, False, "n02113978", "Mexican_hairless"),
                labels.classification_label(0x10D, 0x10D, 0x10D, False, "n02114367", "timber_wolf"),
                labels.classification_label(0x10E, 0x10E, 0x10E, False, "n02114548", "white_wolf"),
                labels.classification_label(0x10F, 0x10F, 0x10F, False, "n02114712", "red_wolf"),
                labels.classification_label(0x110, 0x110, 0x110, False, "n02114855", "coyote"),
                labels.classification_label(0x111, 0x111, 0x111, False, "n02115641", "dingo"),
                labels.classification_label(0x112, 0x112, 0x112, False, "n02115913", "dhole"),
                labels.classification_label(0x113, 0x113, 0x113, False, "n02116738", "African_hunting_dog"),
                labels.classification_label(0x114, 0x114, 0x114, False, "n02117135", "hyena"),
                labels.classification_label(0x115, 0x115, 0x115, False, "n02119022", "red_fox"),
                labels.classification_label(0x116, 0x116, 0x116, False, "n02119789", "kit_fox"),
                labels.classification_label(0x117, 0x117, 0x117, False, "n02120079", "Arctic_fox"),
                labels.classification_label(0x118, 0x118, 0x118, False, "n02120505", "grey_fox"),
                labels.classification_label(0x119, 0x119, 0x119, False, "n02123045", "tabby"),
                labels.classification_label(0x11A, 0x11A, 0x11A, False, "n02123159", "tiger_cat"),
                labels.classification_label(0x11B, 0x11B, 0x11B, False, "n02123394", "Persian_cat"),
                labels.classification_label(0x11C, 0x11C, 0x11C, False, "n02123597", "Siamese_cat"),
                labels.classification_label(0x11D, 0x11D, 0x11D, False, "n02124075", "Egyptian_cat"),
                labels.classification_label(0x11E, 0x11E, 0x11E, False, "n02125311", "cougar"),
                labels.classification_label(0x11F, 0x11F, 0x11F, False, "n02127052", "lynx"),
                labels.classification_label(0x120, 0x120, 0x120, False, "n02128385", "leopard"),
                labels.classification_label(0x121, 0x121, 0x121, False, "n02128757", "snow_leopard"),
                labels.classification_label(0x122, 0x122, 0x122, False, "n02128925", "jaguar"),
                labels.classification_label(0x123, 0x123, 0x123, False, "n02129165", "lion"),
                labels.classification_label(0x124, 0x124, 0x124, False, "n02129604", "tiger"),
                labels.classification_label(0x125, 0x125, 0x125, False, "n02130308", "cheetah"),
                labels.classification_label(0x126, 0x126, 0x126, False, "n02132136", "brown_bear"),
                labels.classification_label(0x127, 0x127, 0x127, False, "n02133161", "American_black_bear"),
                labels.classification_label(0x128, 0x128, 0x128, False, "n02134084", "ice_bear"),
                labels.classification_label(0x129, 0x129, 0x129, False, "n02134418", "sloth_bear"),
                labels.classification_label(0x12A, 0x12A, 0x12A, False, "n02137549", "mongoose"),
                labels.classification_label(0x12B, 0x12B, 0x12B, False, "n02138441", "meerkat"),
                labels.classification_label(0x12C, 0x12C, 0x12C, False, "n02165105", "tiger_beetle"),
                labels.classification_label(0x12D, 0x12D, 0x12D, False, "n02165456", "ladybug"),
                labels.classification_label(0x12E, 0x12E, 0x12E, False, "n02167151", "ground_beetle"),
                labels.classification_label(0x12F, 0x12F, 0x12F, False, "n02168699", "long-horned_beetle"),
                labels.classification_label(0x130, 0x130, 0x130, False, "n02169497", "leaf_beetle"),
                labels.classification_label(0x131, 0x131, 0x131, False, "n02172182", "dung_beetle"),
                labels.classification_label(0x132, 0x132, 0x132, False, "n02174001", "rhinoceros_beetle"),
                labels.classification_label(0x133, 0x133, 0x133, False, "n02177972", "weevil"),
                labels.classification_label(0x134, 0x134, 0x134, False, "n02190166", "fly"),
                labels.classification_label(0x135, 0x135, 0x135, False, "n02206856", "bee"),
                labels.classification_label(0x136, 0x136, 0x136, False, "n02219486", "ant"),
                labels.classification_label(0x137, 0x137, 0x137, False, "n02226429", "grasshopper"),
                labels.classification_label(0x138, 0x138, 0x138, False, "n02229544", "cricket"),
                labels.classification_label(0x139, 0x139, 0x139, False, "n02231487", "walking_stick"),
                labels.classification_label(0x13A, 0x13A, 0x13A, False, "n02233338", "cockroach"),
                labels.classification_label(0x13B, 0x13B, 0x13B, False, "n02236044", "mantis"),
                labels.classification_label(0x13C, 0x13C, 0x13C, False, "n02256656", "cicada"),
                labels.classification_label(0x13D, 0x13D, 0x13D, False, "n02259212", "leafhopper"),
                labels.classification_label(0x13E, 0x13E, 0x13E, False, "n02264363", "lacewing"),
                labels.classification_label(0x13F, 0x13F, 0x13F, False, "n02268443", "dragonfly"),
                labels.classification_label(0x140, 0x140, 0x140, False, "n02268853", "damselfly"),
                labels.classification_label(0x141, 0x141, 0x141, False, "n02276258", "admiral"),
                labels.classification_label(0x142, 0x142, 0x142, False, "n02277742", "ringlet"),
                labels.classification_label(0x143, 0x143, 0x143, False, "n02279972", "monarch"),
                labels.classification_label(0x144, 0x144, 0x144, False, "n02280649", "cabbage_butterfly"),
                labels.classification_label(0x145, 0x145, 0x145, False, "n02281406", "sulphur_butterfly"),
                labels.classification_label(0x146, 0x146, 0x146, False, "n02281787", "lycaenid"),
                labels.classification_label(0x147, 0x147, 0x147, False, "n02317335", "starfish"),
                labels.classification_label(0x148, 0x148, 0x148, False, "n02319095", "sea_urchin"),
                labels.classification_label(0x149, 0x149, 0x149, False, "n02321529", "sea_cucumber"),
                labels.classification_label(0x14A, 0x14A, 0x14A, False, "n02325366", "wood_rabbit"),
                labels.classification_label(0x14B, 0x14B, 0x14B, False, "n02326432", "hare"),
                labels.classification_label(0x14C, 0x14C, 0x14C, False, "n02328150", "Angora"),
                labels.classification_label(0x14D, 0x14D, 0x14D, False, "n02342885", "hamster"),
                labels.classification_label(0x14E, 0x14E, 0x14E, False, "n02346627", "porcupine"),
                labels.classification_label(0x14F, 0x14F, 0x14F, False, "n02356798", "fox_squirrel"),
                labels.classification_label(0x150, 0x150, 0x150, False, "n02361337", "marmot"),
                labels.classification_label(0x151, 0x151, 0x151, False, "n02363005", "beaver"),
                labels.classification_label(0x152, 0x152, 0x152, False, "n02364673", "guinea_pig"),
                labels.classification_label(0x153, 0x153, 0x153, False, "n02389026", "sorrel"),
                labels.classification_label(0x154, 0x154, 0x154, False, "n02391049", "zebra"),
                labels.classification_label(0x155, 0x155, 0x155, False, "n02395406", "hog"),
                labels.classification_label(0x156, 0x156, 0x156, False, "n02396427", "wild_boar"),
                labels.classification_label(0x157, 0x157, 0x157, False, "n02397096", "warthog"),
                labels.classification_label(0x158, 0x158, 0x158, False, "n02398521", "hippopotamus"),
                labels.classification_label(0x159, 0x159, 0x159, False, "n02403003", "ox"),
                labels.classification_label(0x15A, 0x15A, 0x15A, False, "n02408429", "water_buffalo"),
                labels.classification_label(0x15B, 0x15B, 0x15B, False, "n02410509", "bison"),
                labels.classification_label(0x15C, 0x15C, 0x15C, False, "n02412080", "ram"),
                labels.classification_label(0x15D, 0x15D, 0x15D, False, "n02415577", "bighorn"),
                labels.classification_label(0x15E, 0x15E, 0x15E, False, "n02417914", "ibex"),
                labels.classification_label(0x15F, 0x15F, 0x15F, False, "n02422106", "hartebeest"),
                labels.classification_label(0x160, 0x160, 0x160, False, "n02422699", "impala"),
                labels.classification_label(0x161, 0x161, 0x161, False, "n02423022", "gazelle"),
                labels.classification_label(0x162, 0x162, 0x162, False, "n02437312", "Arabian_camel"),
                labels.classification_label(0x163, 0x163, 0x163, False, "n02437616", "llama"),
                labels.classification_label(0x164, 0x164, 0x164, False, "n02441942", "weasel"),
                labels.classification_label(0x165, 0x165, 0x165, False, "n02442845", "mink"),
                labels.classification_label(0x166, 0x166, 0x166, False, "n02443114", "polecat"),
                labels.classification_label(0x167, 0x167, 0x167, False, "n02443484", "black-footed_ferret"),
                labels.classification_label(0x168, 0x168, 0x168, False, "n02444819", "otter"),
                labels.classification_label(0x169, 0x169, 0x169, False, "n02445715", "skunk"),
                labels.classification_label(0x16A, 0x16A, 0x16A, False, "n02447366", "badger"),
                labels.classification_label(0x16B, 0x16B, 0x16B, False, "n02454379", "armadillo"),
                labels.classification_label(0x16C, 0x16C, 0x16C, False, "n02457408", "three-toed_sloth"),
                labels.classification_label(0x16D, 0x16D, 0x16D, False, "n02480495", "orangutan"),
                labels.classification_label(0x16E, 0x16E, 0x16E, False, "n02480855", "gorilla"),
                labels.classification_label(0x16F, 0x16F, 0x16F, False, "n02481823", "chimpanzee"),
                labels.classification_label(0x170, 0x170, 0x170, False, "n02483362", "gibbon"),
                labels.classification_label(0x171, 0x171, 0x171, False, "n02483708", "siamang"),
                labels.classification_label(0x172, 0x172, 0x172, False, "n02484975", "guenon"),
                labels.classification_label(0x173, 0x173, 0x173, False, "n02486261", "patas"),
                labels.classification_label(0x174, 0x174, 0x174, False, "n02486410", "baboon"),
                labels.classification_label(0x175, 0x175, 0x175, False, "n02487347", "macaque"),
                labels.classification_label(0x176, 0x176, 0x176, False, "n02488291", "langur"),
                labels.classification_label(0x177, 0x177, 0x177, False, "n02488702", "colobus"),
                labels.classification_label(0x178, 0x178, 0x178, False, "n02489166", "proboscis_monkey"),
                labels.classification_label(0x179, 0x179, 0x179, False, "n02490219", "marmoset"),
                labels.classification_label(0x17A, 0x17A, 0x17A, False, "n02492035", "capuchin"),
                labels.classification_label(0x17B, 0x17B, 0x17B, False, "n02492660", "howler_monkey"),
                labels.classification_label(0x17C, 0x17C, 0x17C, False, "n02493509", "titi"),
                labels.classification_label(0x17D, 0x17D, 0x17D, False, "n02493793", "spider_monkey"),
                labels.classification_label(0x17E, 0x17E, 0x17E, False, "n02494079", "squirrel_monkey"),
                labels.classification_label(0x17F, 0x17F, 0x17F, False, "n02497673", "Madagascar_cat"),
                labels.classification_label(0x180, 0x180, 0x180, False, "n02500267", "indri"),
                labels.classification_label(0x181, 0x181, 0x181, False, "n02504013", "Indian_elephant"),
                labels.classification_label(0x182, 0x182, 0x182, False, "n02504458", "African_elephant"),
                labels.classification_label(0x183, 0x183, 0x183, False, "n02509815", "lesser_panda"),
                labels.classification_label(0x184, 0x184, 0x184, False, "n02510455", "giant_panda"),
                labels.classification_label(0x185, 0x185, 0x185, False, "n02514041", "barracouta"),
                labels.classification_label(0x186, 0x186, 0x186, False, "n02526121", "eel"),
                labels.classification_label(0x187, 0x187, 0x187, False, "n02536864", "coho"),
                labels.classification_label(0x188, 0x188, 0x188, False, "n02606052", "rock_beauty"),
                labels.classification_label(0x189, 0x189, 0x189, False, "n02607072", "anemone_fish"),
                labels.classification_label(0x18A, 0x18A, 0x18A, False, "n02640242", "sturgeon"),
                labels.classification_label(0x18B, 0x18B, 0x18B, False, "n02641379", "gar"),
                labels.classification_label(0x18C, 0x18C, 0x18C, False, "n02643566", "lionfish"),
                labels.classification_label(0x18D, 0x18D, 0x18D, False, "n02655020", "puffer"),
                labels.classification_label(0x18E, 0x18E, 0x18E, False, "n02666196", "abacus"),
                labels.classification_label(0x18F, 0x18F, 0x18F, False, "n02667093", "abaya"),
                labels.classification_label(0x190, 0x190, 0x190, False, "n02669723", "academic_gown"),
                labels.classification_label(0x191, 0x191, 0x191, False, "n02672831", "accordion"),
                labels.classification_label(0x192, 0x192, 0x192, False, "n02676566", "acoustic_guitar"),
                labels.classification_label(0x193, 0x193, 0x193, False, "n02687172", "aircraft_carrier"),
                labels.classification_label(0x194, 0x194, 0x194, False, "n02690373", "airliner"),
                labels.classification_label(0x195, 0x195, 0x195, False, "n02692877", "airship"),
                labels.classification_label(0x196, 0x196, 0x196, False, "n02699494", "altar"),
                labels.classification_label(0x197, 0x197, 0x197, False, "n02701002", "ambulance"),
                labels.classification_label(0x198, 0x198, 0x198, False, "n02704792", "amphibian"),
                labels.classification_label(0x199, 0x199, 0x199, False, "n02708093", "analog_clock"),
                labels.classification_label(0x19A, 0x19A, 0x19A, False, "n02727426", "apiary"),
                labels.classification_label(0x19B, 0x19B, 0x19B, False, "n02730930", "apron"),
                labels.classification_label(0x19C, 0x19C, 0x19C, False, "n02747177", "ashcan"),
                labels.classification_label(0x19D, 0x19D, 0x19D, False, "n02749479", "assault_rifle"),
                labels.classification_label(0x19E, 0x19E, 0x19E, False, "n02769748", "backpack"),
                labels.classification_label(0x19F, 0x19F, 0x19F, False, "n02776631", "bakery"),
                labels.classification_label(0x1A0, 0x1A0, 0x1A0, False, "n02777292", "balance_beam"),
                labels.classification_label(0x1A1, 0x1A1, 0x1A1, False, "n02782093", "balloon"),
                labels.classification_label(0x1A2, 0x1A2, 0x1A2, False, "n02783161", "ballpoint"),
                labels.classification_label(0x1A3, 0x1A3, 0x1A3, False, "n02786058", "Band_Aid"),
                labels.classification_label(0x1A4, 0x1A4, 0x1A4, False, "n02787622", "banjo"),
                labels.classification_label(0x1A5, 0x1A5, 0x1A5, False, "n02788148", "bannister"),
                labels.classification_label(0x1A6, 0x1A6, 0x1A6, False, "n02790996", "barbell"),
                labels.classification_label(0x1A7, 0x1A7, 0x1A7, False, "n02791124", "barber_chair"),
                labels.classification_label(0x1A8, 0x1A8, 0x1A8, False, "n02791270", "barbershop"),
                labels.classification_label(0x1A9, 0x1A9, 0x1A9, False, "n02793495", "barn"),
                labels.classification_label(0x1AA, 0x1AA, 0x1AA, False, "n02794156", "barometer"),
                labels.classification_label(0x1AB, 0x1AB, 0x1AB, False, "n02795169", "barrel"),
                labels.classification_label(0x1AC, 0x1AC, 0x1AC, False, "n02797295", "barrow"),
                labels.classification_label(0x1AD, 0x1AD, 0x1AD, False, "n02799071", "baseball"),
                labels.classification_label(0x1AE, 0x1AE, 0x1AE, False, "n02802426", "basketball"),
                labels.classification_label(0x1AF, 0x1AF, 0x1AF, False, "n02804414", "bassinet"),
                labels.classification_label(0x1B0, 0x1B0, 0x1B0, False, "n02804610", "bassoon"),
                labels.classification_label(0x1B1, 0x1B1, 0x1B1, False, "n02807133", "bathing_cap"),
                labels.classification_label(0x1B2, 0x1B2, 0x1B2, False, "n02808304", "bath_towel"),
                labels.classification_label(0x1B3, 0x1B3, 0x1B3, False, "n02808440", "bathtub"),
                labels.classification_label(0x1B4, 0x1B4, 0x1B4, False, "n02814533", "beach_wagon"),
                labels.classification_label(0x1B5, 0x1B5, 0x1B5, False, "n02814860", "beacon"),
                labels.classification_label(0x1B6, 0x1B6, 0x1B6, False, "n02815834", "beaker"),
                labels.classification_label(0x1B7, 0x1B7, 0x1B7, False, "n02817516", "bearskin"),
                labels.classification_label(0x1B8, 0x1B8, 0x1B8, False, "n02823428", "beer_bottle"),
                labels.classification_label(0x1B9, 0x1B9, 0x1B9, False, "n02823750", "beer_glass"),
                labels.classification_label(0x1BA, 0x1BA, 0x1BA, False, "n02825657", "bell_cote"),
                labels.classification_label(0x1BB, 0x1BB, 0x1BB, False, "n02834397", "bib"),
                labels.classification_label(0x1BC, 0x1BC, 0x1BC, False, "n02835271", "bicycle-built-for-two"),
                labels.classification_label(0x1BD, 0x1BD, 0x1BD, False, "n02837789", "bikini"),
                labels.classification_label(0x1BE, 0x1BE, 0x1BE, False, "n02840245", "binder"),
                labels.classification_label(0x1BF, 0x1BF, 0x1BF, False, "n02841315", "binoculars"),
                labels.classification_label(0x1C0, 0x1C0, 0x1C0, False, "n02843684", "birdhouse"),
                labels.classification_label(0x1C1, 0x1C1, 0x1C1, False, "n02859443", "boathouse"),
                labels.classification_label(0x1C2, 0x1C2, 0x1C2, False, "n02860847", "bobsled"),
                labels.classification_label(0x1C3, 0x1C3, 0x1C3, False, "n02865351", "bolo_tie"),
                labels.classification_label(0x1C4, 0x1C4, 0x1C4, False, "n02869837", "bonnet"),
                labels.classification_label(0x1C5, 0x1C5, 0x1C5, False, "n02870880", "bookcase"),
                labels.classification_label(0x1C6, 0x1C6, 0x1C6, False, "n02871525", "bookshop"),
                labels.classification_label(0x1C7, 0x1C7, 0x1C7, False, "n02877765", "bottlecap"),
                labels.classification_label(0x1C8, 0x1C8, 0x1C8, False, "n02879718", "bow"),
                labels.classification_label(0x1C9, 0x1C9, 0x1C9, False, "n02883205", "bow_tie"),
                labels.classification_label(0x1CA, 0x1CA, 0x1CA, False, "n02892201", "brass"),
                labels.classification_label(0x1CB, 0x1CB, 0x1CB, False, "n02892767", "brassiere"),
                labels.classification_label(0x1CC, 0x1CC, 0x1CC, False, "n02894605", "breakwater"),
                labels.classification_label(0x1CD, 0x1CD, 0x1CD, False, "n02895154", "breastplate"),
                labels.classification_label(0x1CE, 0x1CE, 0x1CE, False, "n02906734", "broom"),
                labels.classification_label(0x1CF, 0x1CF, 0x1CF, False, "n02909870", "bucket"),
                labels.classification_label(0x1D0, 0x1D0, 0x1D0, False, "n02910353", "buckle"),
                labels.classification_label(0x1D1, 0x1D1, 0x1D1, False, "n02916936", "bulletproof_vest"),
                labels.classification_label(0x1D2, 0x1D2, 0x1D2, False, "n02917067", "bullet_train"),
                labels.classification_label(0x1D3, 0x1D3, 0x1D3, False, "n02927161", "butcher_shop"),
                labels.classification_label(0x1D4, 0x1D4, 0x1D4, False, "n02930766", "cab"),
                labels.classification_label(0x1D5, 0x1D5, 0x1D5, False, "n02939185", "caldron"),
                labels.classification_label(0x1D6, 0x1D6, 0x1D6, False, "n02948072", "candle"),
                labels.classification_label(0x1D7, 0x1D7, 0x1D7, False, "n02950826", "cannon"),
                labels.classification_label(0x1D8, 0x1D8, 0x1D8, False, "n02951358", "canoe"),
                labels.classification_label(0x1D9, 0x1D9, 0x1D9, False, "n02951585", "can_opener"),
                labels.classification_label(0x1DA, 0x1DA, 0x1DA, False, "n02963159", "cardigan"),
                labels.classification_label(0x1DB, 0x1DB, 0x1DB, False, "n02965783", "car_mirror"),
                labels.classification_label(0x1DC, 0x1DC, 0x1DC, False, "n02966193", "carousel"),
                labels.classification_label(0x1DD, 0x1DD, 0x1DD, False, "n02966687", "carpenter's_kit"),
                labels.classification_label(0x1DE, 0x1DE, 0x1DE, False, "n02971356", "carton"),
                labels.classification_label(0x1DF, 0x1DF, 0x1DF, False, "n02974003", "car_wheel"),
                labels.classification_label(0x1E0, 0x1E0, 0x1E0, False, "n02977058", "cash_machine"),
                labels.classification_label(0x1E1, 0x1E1, 0x1E1, False, "n02978881", "cassette"),
                labels.classification_label(0x1E2, 0x1E2, 0x1E2, False, "n02979186", "cassette_player"),
                labels.classification_label(0x1E3, 0x1E3, 0x1E3, False, "n02980441", "castle"),
                labels.classification_label(0x1E4, 0x1E4, 0x1E4, False, "n02981792", "catamaran"),
                labels.classification_label(0x1E5, 0x1E5, 0x1E5, False, "n02988304", "CD_player"),
                labels.classification_label(0x1E6, 0x1E6, 0x1E6, False, "n02992211", "cello"),
                labels.classification_label(0x1E7, 0x1E7, 0x1E7, False, "n02992529", "cellular_telephone"),
                labels.classification_label(0x1E8, 0x1E8, 0x1E8, False, "n02999410", "chain"),
                labels.classification_label(0x1E9, 0x1E9, 0x1E9, False, "n03000134", "chainlink_fence"),
                labels.classification_label(0x1EA, 0x1EA, 0x1EA, False, "n03000247", "chain_mail"),
                labels.classification_label(0x1EB, 0x1EB, 0x1EB, False, "n03000684", "chain_saw"),
                labels.classification_label(0x1EC, 0x1EC, 0x1EC, False, "n03014705", "chest"),
                labels.classification_label(0x1ED, 0x1ED, 0x1ED, False, "n03016953", "chiffonier"),
                labels.classification_label(0x1EE, 0x1EE, 0x1EE, False, "n03017168", "chime"),
                labels.classification_label(0x1EF, 0x1EF, 0x1EF, False, "n03018349", "china_cabinet"),
                labels.classification_label(0x1F0, 0x1F0, 0x1F0, False, "n03026506", "Christmas_stocking"),
                labels.classification_label(0x1F1, 0x1F1, 0x1F1, False, "n03028079", "church"),
                labels.classification_label(0x1F2, 0x1F2, 0x1F2, False, "n03032252", "cinema"),
                labels.classification_label(0x1F3, 0x1F3, 0x1F3, False, "n03041632", "cleaver"),
                labels.classification_label(0x1F4, 0x1F4, 0x1F4, False, "n03042490", "cliff_dwelling"),
                labels.classification_label(0x1F5, 0x1F5, 0x1F5, False, "n03045698", "cloak"),
                labels.classification_label(0x1F6, 0x1F6, 0x1F6, False, "n03047690", "clog"),
                labels.classification_label(0x1F7, 0x1F7, 0x1F7, False, "n03062245", "cocktail_shaker"),
                labels.classification_label(0x1F8, 0x1F8, 0x1F8, False, "n03063599", "coffee_mug"),
                labels.classification_label(0x1F9, 0x1F9, 0x1F9, False, "n03063689", "coffeepot"),
                labels.classification_label(0x1FA, 0x1FA, 0x1FA, False, "n03065424", "coil"),
                labels.classification_label(0x1FB, 0x1FB, 0x1FB, False, "n03075370", "combination_lock"),
                labels.classification_label(0x1FC, 0x1FC, 0x1FC, False, "n03085013", "computer_keyboard"),
                labels.classification_label(0x1FD, 0x1FD, 0x1FD, False, "n03089624", "confectionery"),
                labels.classification_label(0x1FE, 0x1FE, 0x1FE, False, "n03095699", "container_ship"),
                labels.classification_label(0x1FF, 0x1FF, 0x1FF, False, "n03100240", "convertible"),
                labels.classification_label(0x200, 0x200, 0x200, False, "n03109150", "corkscrew"),
                labels.classification_label(0x201, 0x201, 0x201, False, "n03110669", "cornet"),
                labels.classification_label(0x202, 0x202, 0x202, False, "n03124043", "cowboy_boot"),
                labels.classification_label(0x203, 0x203, 0x203, False, "n03124170", "cowboy_hat"),
                labels.classification_label(0x204, 0x204, 0x204, False, "n03125729", "cradle"),
                labels.classification_label(0x205, 0x205, 0x205, False, "n03126707", "crane"),
                labels.classification_label(0x206, 0x206, 0x206, False, "n03127747", "crash_helmet"),
                labels.classification_label(0x207, 0x207, 0x207, False, "n03127925", "crate"),
                labels.classification_label(0x208, 0x208, 0x208, False, "n03131574", "crib"),
                labels.classification_label(0x209, 0x209, 0x209, False, "n03133878", "Crock_Pot"),
                labels.classification_label(0x20A, 0x20A, 0x20A, False, "n03134739", "croquet_ball"),
                labels.classification_label(0x20B, 0x20B, 0x20B, False, "n03141823", "crutch"),
                labels.classification_label(0x20C, 0x20C, 0x20C, False, "n03146219", "cuirass"),
                labels.classification_label(0x20D, 0x20D, 0x20D, False, "n03160309", "dam"),
                labels.classification_label(0x20E, 0x20E, 0x20E, False, "n03179701", "desk"),
                labels.classification_label(0x20F, 0x20F, 0x20F, False, "n03180011", "desktop_computer"),
                labels.classification_label(0x210, 0x210, 0x210, False, "n03187595", "dial_telephone"),
                labels.classification_label(0x211, 0x211, 0x211, False, "n03188531", "diaper"),
                labels.classification_label(0x212, 0x212, 0x212, False, "n03196217", "digital_clock"),
                labels.classification_label(0x213, 0x213, 0x213, False, "n03197337", "digital_watch"),
                labels.classification_label(0x214, 0x214, 0x214, False, "n03201208", "dining_table"),
                labels.classification_label(0x215, 0x215, 0x215, False, "n03207743", "dishrag"),
                labels.classification_label(0x216, 0x216, 0x216, False, "n03207941", "dishwasher"),
                labels.classification_label(0x217, 0x217, 0x217, False, "n03208938", "disk_brake"),
                labels.classification_label(0x218, 0x218, 0x218, False, "n03216828", "dock"),
                labels.classification_label(0x219, 0x219, 0x219, False, "n03218198", "dogsled"),
                labels.classification_label(0x21A, 0x21A, 0x21A, False, "n03220513", "dome"),
                labels.classification_label(0x21B, 0x21B, 0x21B, False, "n03223299", "doormat"),
                labels.classification_label(0x21C, 0x21C, 0x21C, False, "n03240683", "drilling_platform"),
                labels.classification_label(0x21D, 0x21D, 0x21D, False, "n03249569", "drum"),
                labels.classification_label(0x21E, 0x21E, 0x21E, False, "n03250847", "drumstick"),
                labels.classification_label(0x21F, 0x21F, 0x21F, False, "n03255030", "dumbbell"),
                labels.classification_label(0x220, 0x220, 0x220, False, "n03259280", "Dutch_oven"),
                labels.classification_label(0x221, 0x221, 0x221, False, "n03271574", "electric_fan"),
                labels.classification_label(0x222, 0x222, 0x222, False, "n03272010", "electric_guitar"),
                labels.classification_label(0x223, 0x223, 0x223, False, "n03272562", "electric_locomotive"),
                labels.classification_label(0x224, 0x224, 0x224, False, "n03290653", "entertainment_center"),
                labels.classification_label(0x225, 0x225, 0x225, False, "n03291819", "envelope"),
                labels.classification_label(0x226, 0x226, 0x226, False, "n03297495", "espresso_maker"),
                labels.classification_label(0x227, 0x227, 0x227, False, "n03314780", "face_powder"),
                labels.classification_label(0x228, 0x228, 0x228, False, "n03325584", "feather_boa"),
                labels.classification_label(0x229, 0x229, 0x229, False, "n03337140", "file"),
                labels.classification_label(0x22A, 0x22A, 0x22A, False, "n03344393", "fireboat"),
                labels.classification_label(0x22B, 0x22B, 0x22B, False, "n03345487", "fire_engine"),
                labels.classification_label(0x22C, 0x22C, 0x22C, False, "n03347037", "fire_screen"),
                labels.classification_label(0x22D, 0x22D, 0x22D, False, "n03355925", "flagpole"),
                labels.classification_label(0x22E, 0x22E, 0x22E, False, "n03372029", "flute"),
                labels.classification_label(0x22F, 0x22F, 0x22F, False, "n03376595", "folding_chair"),
                labels.classification_label(0x230, 0x230, 0x230, False, "n03379051", "football_helmet"),
                labels.classification_label(0x231, 0x231, 0x231, False, "n03384352", "forklift"),
                labels.classification_label(0x232, 0x232, 0x232, False, "n03388043", "fountain"),
                labels.classification_label(0x233, 0x233, 0x233, False, "n03388183", "fountain_pen"),
                labels.classification_label(0x234, 0x234, 0x234, False, "n03388549", "four-poster"),
                labels.classification_label(0x235, 0x235, 0x235, False, "n03393912", "freight_car"),
                labels.classification_label(0x236, 0x236, 0x236, False, "n03394916", "French_horn"),
                labels.classification_label(0x237, 0x237, 0x237, False, "n03400231", "frying_pan"),
                labels.classification_label(0x238, 0x238, 0x238, False, "n03404251", "fur_coat"),
                labels.classification_label(0x239, 0x239, 0x239, False, "n03417042", "garbage_truck"),
                labels.classification_label(0x23A, 0x23A, 0x23A, False, "n03424325", "gasmask"),
                labels.classification_label(0x23B, 0x23B, 0x23B, False, "n03425413", "gas_pump"),
                labels.classification_label(0x23C, 0x23C, 0x23C, False, "n03443371", "goblet"),
                labels.classification_label(0x23D, 0x23D, 0x23D, False, "n03444034", "go-kart"),
                labels.classification_label(0x23E, 0x23E, 0x23E, False, "n03445777", "golf_ball"),
                labels.classification_label(0x23F, 0x23F, 0x23F, False, "n03445924", "golfcart"),
                labels.classification_label(0x240, 0x240, 0x240, False, "n03447447", "gondola"),
                labels.classification_label(0x241, 0x241, 0x241, False, "n03447721", "gong"),
                labels.classification_label(0x242, 0x242, 0x242, False, "n03450230", "gown"),
                labels.classification_label(0x243, 0x243, 0x243, False, "n03452741", "grand_piano"),
                labels.classification_label(0x244, 0x244, 0x244, False, "n03457902", "greenhouse"),
                labels.classification_label(0x245, 0x245, 0x245, False, "n03459775", "grille"),
                labels.classification_label(0x246, 0x246, 0x246, False, "n03461385", "grocery_store"),
                labels.classification_label(0x247, 0x247, 0x247, False, "n03467068", "guillotine"),
                labels.classification_label(0x248, 0x248, 0x248, False, "n03476684", "hair_slide"),
                labels.classification_label(0x249, 0x249, 0x249, False, "n03476991", "hair_spray"),
                labels.classification_label(0x24A, 0x24A, 0x24A, False, "n03478589", "half_track"),
                labels.classification_label(0x24B, 0x24B, 0x24B, False, "n03481172", "hammer"),
                labels.classification_label(0x24C, 0x24C, 0x24C, False, "n03482405", "hamper"),
                labels.classification_label(0x24D, 0x24D, 0x24D, False, "n03483316", "hand_blower"),
                labels.classification_label(0x24E, 0x24E, 0x24E, False, "n03485407", "hand-held_computer"),
                labels.classification_label(0x24F, 0x24F, 0x24F, False, "n03485794", "handkerchief"),
                labels.classification_label(0x250, 0x250, 0x250, False, "n03492542", "hard_disc"),
                labels.classification_label(0x251, 0x251, 0x251, False, "n03494278", "harmonica"),
                labels.classification_label(0x252, 0x252, 0x252, False, "n03495258", "harp"),
                labels.classification_label(0x253, 0x253, 0x253, False, "n03496892", "harvester"),
                labels.classification_label(0x254, 0x254, 0x254, False, "n03498962", "hatchet"),
                labels.classification_label(0x255, 0x255, 0x255, False, "n03527444", "holster"),
                labels.classification_label(0x256, 0x256, 0x256, False, "n03529860", "home_theater"),
                labels.classification_label(0x257, 0x257, 0x257, False, "n03530642", "honeycomb"),
                labels.classification_label(0x258, 0x258, 0x258, False, "n03532672", "hook"),
                labels.classification_label(0x259, 0x259, 0x259, False, "n03534580", "hoopskirt"),
                labels.classification_label(0x25A, 0x25A, 0x25A, False, "n03535780", "horizontal_bar"),
                labels.classification_label(0x25B, 0x25B, 0x25B, False, "n03538406", "horse_cart"),
                labels.classification_label(0x25C, 0x25C, 0x25C, False, "n03544143", "hourglass"),
                labels.classification_label(0x25D, 0x25D, 0x25D, False, "n03584254", "iPod"),
                labels.classification_label(0x25E, 0x25E, 0x25E, False, "n03584829", "iron"),
                labels.classification_label(0x25F, 0x25F, 0x25F, False, "n03590841", "jack-o'-lantern"),
                labels.classification_label(0x260, 0x260, 0x260, False, "n03594734", "jean"),
                labels.classification_label(0x261, 0x261, 0x261, False, "n03594945", "jeep"),
                labels.classification_label(0x262, 0x262, 0x262, False, "n03595614", "jersey"),
                labels.classification_label(0x263, 0x263, 0x263, False, "n03598930", "jigsaw_puzzle"),
                labels.classification_label(0x264, 0x264, 0x264, False, "n03599486", "jinrikisha"),
                labels.classification_label(0x265, 0x265, 0x265, False, "n03602883", "joystick"),
                labels.classification_label(0x266, 0x266, 0x266, False, "n03617480", "kimono"),
                labels.classification_label(0x267, 0x267, 0x267, False, "n03623198", "knee_pad"),
                labels.classification_label(0x268, 0x268, 0x268, False, "n03627232", "knot"),
                labels.classification_label(0x269, 0x269, 0x269, False, "n03630383", "lab_coat"),
                labels.classification_label(0x26A, 0x26A, 0x26A, False, "n03633091", "ladle"),
                labels.classification_label(0x26B, 0x26B, 0x26B, False, "n03637318", "lampshade"),
                labels.classification_label(0x26C, 0x26C, 0x26C, False, "n03642806", "laptop"),
                labels.classification_label(0x26D, 0x26D, 0x26D, False, "n03649909", "lawn_mower"),
                labels.classification_label(0x26E, 0x26E, 0x26E, False, "n03657121", "lens_cap"),
                labels.classification_label(0x26F, 0x26F, 0x26F, False, "n03658185", "letter_opener"),
                labels.classification_label(0x270, 0x270, 0x270, False, "n03661043", "library"),
                labels.classification_label(0x271, 0x271, 0x271, False, "n03662601", "lifeboat"),
                labels.classification_label(0x272, 0x272, 0x272, False, "n03666591", "lighter"),
                labels.classification_label(0x273, 0x273, 0x273, False, "n03670208", "limousine"),
                labels.classification_label(0x274, 0x274, 0x274, False, "n03673027", "liner"),
                labels.classification_label(0x275, 0x275, 0x275, False, "n03676483", "lipstick"),
                labels.classification_label(0x276, 0x276, 0x276, False, "n03680355", "Loafer"),
                labels.classification_label(0x277, 0x277, 0x277, False, "n03690938", "lotion"),
                labels.classification_label(0x278, 0x278, 0x278, False, "n03691459", "loudspeaker"),
                labels.classification_label(0x279, 0x279, 0x279, False, "n03692522", "loupe"),
                labels.classification_label(0x27A, 0x27A, 0x27A, False, "n03697007", "lumbermill"),
                labels.classification_label(0x27B, 0x27B, 0x27B, False, "n03706229", "magnetic_compass"),
                labels.classification_label(0x27C, 0x27C, 0x27C, False, "n03709823", "mailbag"),
                labels.classification_label(0x27D, 0x27D, 0x27D, False, "n03710193", "mailbox"),
                labels.classification_label(0x27E, 0x27E, 0x27E, False, "n03710637", "maillot"),
                labels.classification_label(0x27F, 0x27F, 0x27F, False, "n03710721", "maillot"),
                labels.classification_label(0x280, 0x280, 0x280, False, "n03717622", "manhole_cover"),
                labels.classification_label(0x281, 0x281, 0x281, False, "n03720891", "maraca"),
                labels.classification_label(0x282, 0x282, 0x282, False, "n03721384", "marimba"),
                labels.classification_label(0x283, 0x283, 0x283, False, "n03724870", "mask"),
                labels.classification_label(0x284, 0x284, 0x284, False, "n03729826", "matchstick"),
                labels.classification_label(0x285, 0x285, 0x285, False, "n03733131", "maypole"),
                labels.classification_label(0x286, 0x286, 0x286, False, "n03733281", "maze"),
                labels.classification_label(0x287, 0x287, 0x287, False, "n03733805", "measuring_cup"),
                labels.classification_label(0x288, 0x288, 0x288, False, "n03742115", "medicine_chest"),
                labels.classification_label(0x289, 0x289, 0x289, False, "n03743016", "megalith"),
                labels.classification_label(0x28A, 0x28A, 0x28A, False, "n03759954", "microphone"),
                labels.classification_label(0x28B, 0x28B, 0x28B, False, "n03761084", "microwave"),
                labels.classification_label(0x28C, 0x28C, 0x28C, False, "n03763968", "military_uniform"),
                labels.classification_label(0x28D, 0x28D, 0x28D, False, "n03764736", "milk_can"),
                labels.classification_label(0x28E, 0x28E, 0x28E, False, "n03769881", "minibus"),
                labels.classification_label(0x28F, 0x28F, 0x28F, False, "n03770439", "miniskirt"),
                labels.classification_label(0x290, 0x290, 0x290, False, "n03770679", "minivan"),
                labels.classification_label(0x291, 0x291, 0x291, False, "n03773504", "missile"),
                labels.classification_label(0x292, 0x292, 0x292, False, "n03775071", "mitten"),
                labels.classification_label(0x293, 0x293, 0x293, False, "n03775546", "mixing_bowl"),
                labels.classification_label(0x294, 0x294, 0x294, False, "n03776460", "mobile_home"),
                labels.classification_label(0x295, 0x295, 0x295, False, "n03777568", "Model_T"),
                labels.classification_label(0x296, 0x296, 0x296, False, "n03777754", "modem"),
                labels.classification_label(0x297, 0x297, 0x297, False, "n03781244", "monastery"),
                labels.classification_label(0x298, 0x298, 0x298, False, "n03782006", "monitor"),
                labels.classification_label(0x299, 0x299, 0x299, False, "n03785016", "moped"),
                labels.classification_label(0x29A, 0x29A, 0x29A, False, "n03786901", "mortar"),
                labels.classification_label(0x29B, 0x29B, 0x29B, False, "n03787032", "mortarboard"),
                labels.classification_label(0x29C, 0x29C, 0x29C, False, "n03788195", "mosque"),
                labels.classification_label(0x29D, 0x29D, 0x29D, False, "n03788365", "mosquito_net"),
                labels.classification_label(0x29E, 0x29E, 0x29E, False, "n03791053", "motor_scooter"),
                labels.classification_label(0x29F, 0x29F, 0x29F, False, "n03792782", "mountain_bike"),
                labels.classification_label(0x2A0, 0x2A0, 0x2A0, False, "n03792972", "mountain_tent"),
                labels.classification_label(0x2A1, 0x2A1, 0x2A1, False, "n03793489", "mouse"),
                labels.classification_label(0x2A2, 0x2A2, 0x2A2, False, "n03794056", "mousetrap"),
                labels.classification_label(0x2A3, 0x2A3, 0x2A3, False, "n03796401", "moving_van"),
                labels.classification_label(0x2A4, 0x2A4, 0x2A4, False, "n03803284", "muzzle"),
                labels.classification_label(0x2A5, 0x2A5, 0x2A5, False, "n03804744", "nail"),
                labels.classification_label(0x2A6, 0x2A6, 0x2A6, False, "n03814639", "neck_brace"),
                labels.classification_label(0x2A7, 0x2A7, 0x2A7, False, "n03814906", "necklace"),
                labels.classification_label(0x2A8, 0x2A8, 0x2A8, False, "n03825788", "nipple"),
                labels.classification_label(0x2A9, 0x2A9, 0x2A9, False, "n03832673", "notebook"),
                labels.classification_label(0x2AA, 0x2AA, 0x2AA, False, "n03837869", "obelisk"),
                labels.classification_label(0x2AB, 0x2AB, 0x2AB, False, "n03838899", "oboe"),
                labels.classification_label(0x2AC, 0x2AC, 0x2AC, False, "n03840681", "ocarina"),
                labels.classification_label(0x2AD, 0x2AD, 0x2AD, False, "n03841143", "odometer"),
                labels.classification_label(0x2AE, 0x2AE, 0x2AE, False, "n03843555", "oil_filter"),
                labels.classification_label(0x2AF, 0x2AF, 0x2AF, False, "n03854065", "organ"),
                labels.classification_label(0x2B0, 0x2B0, 0x2B0, False, "n03857828", "oscilloscope"),
                labels.classification_label(0x2B1, 0x2B1, 0x2B1, False, "n03866082", "overskirt"),
                labels.classification_label(0x2B2, 0x2B2, 0x2B2, False, "n03868242", "oxcart"),
                labels.classification_label(0x2B3, 0x2B3, 0x2B3, False, "n03868863", "oxygen_mask"),
                labels.classification_label(0x2B4, 0x2B4, 0x2B4, False, "n03871628", "packet"),
                labels.classification_label(0x2B5, 0x2B5, 0x2B5, False, "n03873416", "paddle"),
                labels.classification_label(0x2B6, 0x2B6, 0x2B6, False, "n03874293", "paddlewheel"),
                labels.classification_label(0x2B7, 0x2B7, 0x2B7, False, "n03874599", "padlock"),
                labels.classification_label(0x2B8, 0x2B8, 0x2B8, False, "n03876231", "paintbrush"),
                labels.classification_label(0x2B9, 0x2B9, 0x2B9, False, "n03877472", "pajama"),
                labels.classification_label(0x2BA, 0x2BA, 0x2BA, False, "n03877845", "palace"),
                labels.classification_label(0x2BB, 0x2BB, 0x2BB, False, "n03884397", "panpipe"),
                labels.classification_label(0x2BC, 0x2BC, 0x2BC, False, "n03887697", "paper_towel"),
                labels.classification_label(0x2BD, 0x2BD, 0x2BD, False, "n03888257", "parachute"),
                labels.classification_label(0x2BE, 0x2BE, 0x2BE, False, "n03888605", "parallel_bars"),
                labels.classification_label(0x2BF, 0x2BF, 0x2BF, False, "n03891251", "park_bench"),
                labels.classification_label(0x2C0, 0x2C0, 0x2C0, False, "n03891332", "parking_meter"),
                labels.classification_label(0x2C1, 0x2C1, 0x2C1, False, "n03895866", "passenger_car"),
                labels.classification_label(0x2C2, 0x2C2, 0x2C2, False, "n03899768", "patio"),
                labels.classification_label(0x2C3, 0x2C3, 0x2C3, False, "n03902125", "pay-phone"),
                labels.classification_label(0x2C4, 0x2C4, 0x2C4, False, "n03903868", "pedestal"),
                labels.classification_label(0x2C5, 0x2C5, 0x2C5, False, "n03908618", "pencil_box"),
                labels.classification_label(0x2C6, 0x2C6, 0x2C6, False, "n03908714", "pencil_sharpener"),
                labels.classification_label(0x2C7, 0x2C7, 0x2C7, False, "n03916031", "perfume"),
                labels.classification_label(0x2C8, 0x2C8, 0x2C8, False, "n03920288", "Petri_dish"),
                labels.classification_label(0x2C9, 0x2C9, 0x2C9, False, "n03924679", "photocopier"),
                labels.classification_label(0x2CA, 0x2CA, 0x2CA, False, "n03929660", "pick"),
                labels.classification_label(0x2CB, 0x2CB, 0x2CB, False, "n03929855", "pickelhaube"),
                labels.classification_label(0x2CC, 0x2CC, 0x2CC, False, "n03930313", "picket_fence"),
                labels.classification_label(0x2CD, 0x2CD, 0x2CD, False, "n03930630", "pickup"),
                labels.classification_label(0x2CE, 0x2CE, 0x2CE, False, "n03933933", "pier"),
                labels.classification_label(0x2CF, 0x2CF, 0x2CF, False, "n03935335", "piggy_bank"),
                labels.classification_label(0x2D0, 0x2D0, 0x2D0, False, "n03937543", "pill_bottle"),
                labels.classification_label(0x2D1, 0x2D1, 0x2D1, False, "n03938244", "pillow"),
                labels.classification_label(0x2D2, 0x2D2, 0x2D2, False, "n03942813", "ping-pong_ball"),
                labels.classification_label(0x2D3, 0x2D3, 0x2D3, False, "n03944341", "pinwheel"),
                labels.classification_label(0x2D4, 0x2D4, 0x2D4, False, "n03947888", "pirate"),
                labels.classification_label(0x2D5, 0x2D5, 0x2D5, False, "n03950228", "pitcher"),
                labels.classification_label(0x2D6, 0x2D6, 0x2D6, False, "n03954731", "plane"),
                labels.classification_label(0x2D7, 0x2D7, 0x2D7, False, "n03956157", "planetarium"),
                labels.classification_label(0x2D8, 0x2D8, 0x2D8, False, "n03958227", "plastic_bag"),
                labels.classification_label(0x2D9, 0x2D9, 0x2D9, False, "n03961711", "plate_rack"),
                labels.classification_label(0x2DA, 0x2DA, 0x2DA, False, "n03967562", "plow"),
                labels.classification_label(0x2DB, 0x2DB, 0x2DB, False, "n03970156", "plunger"),
                labels.classification_label(0x2DC, 0x2DC, 0x2DC, False, "n03976467", "Polaroid_camera"),
                labels.classification_label(0x2DD, 0x2DD, 0x2DD, False, "n03976657", "pole"),
                labels.classification_label(0x2DE, 0x2DE, 0x2DE, False, "n03977966", "police_van"),
                labels.classification_label(0x2DF, 0x2DF, 0x2DF, False, "n03980874", "poncho"),
                labels.classification_label(0x2E0, 0x2E0, 0x2E0, False, "n03982430", "pool_table"),
                labels.classification_label(0x2E1, 0x2E1, 0x2E1, False, "n03983396", "pop_bottle"),
                labels.classification_label(0x2E2, 0x2E2, 0x2E2, False, "n03991062", "pot"),
                labels.classification_label(0x2E3, 0x2E3, 0x2E3, False, "n03992509", "potter's_wheel"),
                labels.classification_label(0x2E4, 0x2E4, 0x2E4, False, "n03995372", "power_drill"),
                labels.classification_label(0x2E5, 0x2E5, 0x2E5, False, "n03998194", "prayer_rug"),
                labels.classification_label(0x2E6, 0x2E6, 0x2E6, False, "n04004767", "printer"),
                labels.classification_label(0x2E7, 0x2E7, 0x2E7, False, "n04005630", "prison"),
                labels.classification_label(0x2E8, 0x2E8, 0x2E8, False, "n04008634", "projectile"),
                labels.classification_label(0x2E9, 0x2E9, 0x2E9, False, "n04009552", "projector"),
                labels.classification_label(0x2EA, 0x2EA, 0x2EA, False, "n04019541", "puck"),
                labels.classification_label(0x2EB, 0x2EB, 0x2EB, False, "n04023962", "punching_bag"),
                labels.classification_label(0x2EC, 0x2EC, 0x2EC, False, "n04026417", "purse"),
                labels.classification_label(0x2ED, 0x2ED, 0x2ED, False, "n04033901", "quill"),
                labels.classification_label(0x2EE, 0x2EE, 0x2EE, False, "n04033995", "quilt"),
                labels.classification_label(0x2EF, 0x2EF, 0x2EF, False, "n04037443", "racer"),
                labels.classification_label(0x2F0, 0x2F0, 0x2F0, False, "n04039381", "racket"),
                labels.classification_label(0x2F1, 0x2F1, 0x2F1, False, "n04040759", "radiator"),
                labels.classification_label(0x2F2, 0x2F2, 0x2F2, False, "n04041544", "radio"),
                labels.classification_label(0x2F3, 0x2F3, 0x2F3, False, "n04044716", "radio_telescope"),
                labels.classification_label(0x2F4, 0x2F4, 0x2F4, False, "n04049303", "rain_barrel"),
                labels.classification_label(0x2F5, 0x2F5, 0x2F5, False, "n04065272", "recreational_vehicle"),
                labels.classification_label(0x2F6, 0x2F6, 0x2F6, False, "n04067472", "reel"),
                labels.classification_label(0x2F7, 0x2F7, 0x2F7, False, "n04069434", "reflex_camera"),
                labels.classification_label(0x2F8, 0x2F8, 0x2F8, False, "n04070727", "refrigerator"),
                labels.classification_label(0x2F9, 0x2F9, 0x2F9, False, "n04074963", "remote_control"),
                labels.classification_label(0x2FA, 0x2FA, 0x2FA, False, "n04081281", "restaurant"),
                labels.classification_label(0x2FB, 0x2FB, 0x2FB, False, "n04086273", "revolver"),
                labels.classification_label(0x2FC, 0x2FC, 0x2FC, False, "n04090263", "rifle"),
                labels.classification_label(0x2FD, 0x2FD, 0x2FD, False, "n04099969", "rocking_chair"),
                labels.classification_label(0x2FE, 0x2FE, 0x2FE, False, "n04111531", "rotisserie"),
                labels.classification_label(0x2FF, 0x2FF, 0x2FF, False, "n04116512", "rubber_eraser"),
                labels.classification_label(0x300, 0x300, 0x300, False, "n04118538", "rugby_ball"),
                labels.classification_label(0x301, 0x301, 0x301, False, "n04118776", "rule"),
                labels.classification_label(0x302, 0x302, 0x302, False, "n04120489", "running_shoe"),
                labels.classification_label(0x303, 0x303, 0x303, False, "n04125021", "safe"),
                labels.classification_label(0x304, 0x304, 0x304, False, "n04127249", "safety_pin"),
                labels.classification_label(0x305, 0x305, 0x305, False, "n04131690", "saltshaker"),
                labels.classification_label(0x306, 0x306, 0x306, False, "n04133789", "sandal"),
                labels.classification_label(0x307, 0x307, 0x307, False, "n04136333", "sarong"),
                labels.classification_label(0x308, 0x308, 0x308, False, "n04141076", "sax"),
                labels.classification_label(0x309, 0x309, 0x309, False, "n04141327", "scabbard"),
                labels.classification_label(0x30A, 0x30A, 0x30A, False, "n04141975", "scale"),
                labels.classification_label(0x30B, 0x30B, 0x30B, False, "n04146614", "school_bus"),
                labels.classification_label(0x30C, 0x30C, 0x30C, False, "n04147183", "schooner"),
                labels.classification_label(0x30D, 0x30D, 0x30D, False, "n04149813", "scoreboard"),
                labels.classification_label(0x30E, 0x30E, 0x30E, False, "n04152593", "screen"),
                labels.classification_label(0x30F, 0x30F, 0x30F, False, "n04153751", "screw"),
                labels.classification_label(0x310, 0x310, 0x310, False, "n04154565", "screwdriver"),
                labels.classification_label(0x311, 0x311, 0x311, False, "n04162706", "seat_belt"),
                labels.classification_label(0x312, 0x312, 0x312, False, "n04179913", "sewing_machine"),
                labels.classification_label(0x313, 0x313, 0x313, False, "n04192698", "shield"),
                labels.classification_label(0x314, 0x314, 0x314, False, "n04200800", "shoe_shop"),
                labels.classification_label(0x315, 0x315, 0x315, False, "n04201297", "shoji"),
                labels.classification_label(0x316, 0x316, 0x316, False, "n04204238", "shopping_basket"),
                labels.classification_label(0x317, 0x317, 0x317, False, "n04204347", "shopping_cart"),
                labels.classification_label(0x318, 0x318, 0x318, False, "n04208210", "shovel"),
                labels.classification_label(0x319, 0x319, 0x319, False, "n04209133", "shower_cap"),
                labels.classification_label(0x31A, 0x31A, 0x31A, False, "n04209239", "shower_curtain"),
                labels.classification_label(0x31B, 0x31B, 0x31B, False, "n04228054", "ski"),
                labels.classification_label(0x31C, 0x31C, 0x31C, False, "n04229816", "ski_mask"),
                labels.classification_label(0x31D, 0x31D, 0x31D, False, "n04235860", "sleeping_bag"),
                labels.classification_label(0x31E, 0x31E, 0x31E, False, "n04238763", "slide_rule"),
                labels.classification_label(0x31F, 0x31F, 0x31F, False, "n04239074", "sliding_door"),
                labels.classification_label(0x320, 0x320, 0x320, False, "n04243546", "slot"),
                labels.classification_label(0x321, 0x321, 0x321, False, "n04251144", "snorkel"),
                labels.classification_label(0x322, 0x322, 0x322, False, "n04252077", "snowmobile"),
                labels.classification_label(0x323, 0x323, 0x323, False, "n04252225", "snowplow"),
                labels.classification_label(0x324, 0x324, 0x324, False, "n04254120", "soap_dispenser"),
                labels.classification_label(0x325, 0x325, 0x325, False, "n04254680", "soccer_ball"),
                labels.classification_label(0x326, 0x326, 0x326, False, "n04254777", "sock"),
                labels.classification_label(0x327, 0x327, 0x327, False, "n04258138", "solar_dish"),
                labels.classification_label(0x328, 0x328, 0x328, False, "n04259630", "sombrero"),
                labels.classification_label(0x329, 0x329, 0x329, False, "n04263257", "soup_bowl"),
                labels.classification_label(0x32A, 0x32A, 0x32A, False, "n04264628", "space_bar"),
                labels.classification_label(0x32B, 0x32B, 0x32B, False, "n04265275", "space_heater"),
                labels.classification_label(0x32C, 0x32C, 0x32C, False, "n04266014", "space_shuttle"),
                labels.classification_label(0x32D, 0x32D, 0x32D, False, "n04270147", "spatula"),
                labels.classification_label(0x32E, 0x32E, 0x32E, False, "n04273569", "speedboat"),
                labels.classification_label(0x32F, 0x32F, 0x32F, False, "n04275548", "spider_web"),
                labels.classification_label(0x330, 0x330, 0x330, False, "n04277352", "spindle"),
                labels.classification_label(0x331, 0x331, 0x331, False, "n04285008", "sports_car"),
                labels.classification_label(0x332, 0x332, 0x332, False, "n04286575", "spotlight"),
                labels.classification_label(0x333, 0x333, 0x333, False, "n04296562", "stage"),
                labels.classification_label(0x334, 0x334, 0x334, False, "n04310018", "steam_locomotive"),
                labels.classification_label(0x335, 0x335, 0x335, False, "n04311004", "steel_arch_bridge"),
                labels.classification_label(0x336, 0x336, 0x336, False, "n04311174", "steel_drum"),
                labels.classification_label(0x337, 0x337, 0x337, False, "n04317175", "stethoscope"),
                labels.classification_label(0x338, 0x338, 0x338, False, "n04325704", "stole"),
                labels.classification_label(0x339, 0x339, 0x339, False, "n04326547", "stone_wall"),
                labels.classification_label(0x33A, 0x33A, 0x33A, False, "n04328186", "stopwatch"),
                labels.classification_label(0x33B, 0x33B, 0x33B, False, "n04330267", "stove"),
                labels.classification_label(0x33C, 0x33C, 0x33C, False, "n04332243", "strainer"),
                labels.classification_label(0x33D, 0x33D, 0x33D, False, "n04335435", "streetcar"),
                labels.classification_label(0x33E, 0x33E, 0x33E, False, "n04336792", "stretcher"),
                labels.classification_label(0x33F, 0x33F, 0x33F, False, "n04344873", "studio_couch"),
                labels.classification_label(0x340, 0x340, 0x340, False, "n04346328", "stupa"),
                labels.classification_label(0x341, 0x341, 0x341, False, "n04347754", "submarine"),
                labels.classification_label(0x342, 0x342, 0x342, False, "n04350905", "suit"),
                labels.classification_label(0x343, 0x343, 0x343, False, "n04355338", "sundial"),
                labels.classification_label(0x344, 0x344, 0x344, False, "n04355933", "sunglass"),
                labels.classification_label(0x345, 0x345, 0x345, False, "n04356056", "sunglasses"),
                labels.classification_label(0x346, 0x346, 0x346, False, "n04357314", "sunscreen"),
                labels.classification_label(0x347, 0x347, 0x347, False, "n04366367", "suspension_bridge"),
                labels.classification_label(0x348, 0x348, 0x348, False, "n04367480", "swab"),
                labels.classification_label(0x349, 0x349, 0x349, False, "n04370456", "sweatshirt"),
                labels.classification_label(0x34A, 0x34A, 0x34A, False, "n04371430", "swimming_trunks"),
                labels.classification_label(0x34B, 0x34B, 0x34B, False, "n04371774", "swing"),
                labels.classification_label(0x34C, 0x34C, 0x34C, False, "n04372370", "switch"),
                labels.classification_label(0x34D, 0x34D, 0x34D, False, "n04376876", "syringe"),
                labels.classification_label(0x34E, 0x34E, 0x34E, False, "n04380533", "table_lamp"),
                labels.classification_label(0x34F, 0x34F, 0x34F, False, "n04389033", "tank"),
                labels.classification_label(0x350, 0x350, 0x350, False, "n04392985", "tape_player"),
                labels.classification_label(0x351, 0x351, 0x351, False, "n04398044", "teapot"),
                labels.classification_label(0x352, 0x352, 0x352, False, "n04399382", "teddy"),
                labels.classification_label(0x353, 0x353, 0x353, False, "n04404412", "television"),
                labels.classification_label(0x354, 0x354, 0x354, False, "n04409515", "tennis_ball"),
                labels.classification_label(0x355, 0x355, 0x355, False, "n04417672", "thatch"),
                labels.classification_label(0x356, 0x356, 0x356, False, "n04418357", "theater_curtain"),
                labels.classification_label(0x357, 0x357, 0x357, False, "n04423845", "thimble"),
                labels.classification_label(0x358, 0x358, 0x358, False, "n04428191", "thresher"),
                labels.classification_label(0x359, 0x359, 0x359, False, "n04429376", "throne"),
                labels.classification_label(0x35A, 0x35A, 0x35A, False, "n04435653", "tile_roof"),
                labels.classification_label(0x35B, 0x35B, 0x35B, False, "n04442312", "toaster"),
                labels.classification_label(0x35C, 0x35C, 0x35C, False, "n04443257", "tobacco_shop"),
                labels.classification_label(0x35D, 0x35D, 0x35D, False, "n04447861", "toilet_seat"),
                labels.classification_label(0x35E, 0x35E, 0x35E, False, "n04456115", "torch"),
                labels.classification_label(0x35F, 0x35F, 0x35F, False, "n04458633", "totem_pole"),
                labels.classification_label(0x360, 0x360, 0x360, False, "n04461696", "tow_truck"),
                labels.classification_label(0x361, 0x361, 0x361, False, "n04462240", "toyshop"),
                labels.classification_label(0x362, 0x362, 0x362, False, "n04465501", "tractor"),
                labels.classification_label(0x363, 0x363, 0x363, False, "n04467665", "trailer_truck"),
                labels.classification_label(0x364, 0x364, 0x364, False, "n04476259", "tray"),
                labels.classification_label(0x365, 0x365, 0x365, False, "n04479046", "trench_coat"),
                labels.classification_label(0x366, 0x366, 0x366, False, "n04482393", "tricycle"),
                labels.classification_label(0x367, 0x367, 0x367, False, "n04483307", "trimaran"),
                labels.classification_label(0x368, 0x368, 0x368, False, "n04485082", "tripod"),
                labels.classification_label(0x369, 0x369, 0x369, False, "n04486054", "triumphal_arch"),
                labels.classification_label(0x36A, 0x36A, 0x36A, False, "n04487081", "trolleybus"),
                labels.classification_label(0x36B, 0x36B, 0x36B, False, "n04487394", "trombone"),
                labels.classification_label(0x36C, 0x36C, 0x36C, False, "n04493381", "tub"),
                labels.classification_label(0x36D, 0x36D, 0x36D, False, "n04501370", "turnstile"),
                labels.classification_label(0x36E, 0x36E, 0x36E, False, "n04505470", "typewriter_keyboard"),
                labels.classification_label(0x36F, 0x36F, 0x36F, False, "n04507155", "umbrella"),
                labels.classification_label(0x370, 0x370, 0x370, False, "n04509417", "unicycle"),
                labels.classification_label(0x371, 0x371, 0x371, False, "n04515003", "upright"),
                labels.classification_label(0x372, 0x372, 0x372, False, "n04517823", "vacuum"),
                labels.classification_label(0x373, 0x373, 0x373, False, "n04522168", "vase"),
                labels.classification_label(0x374, 0x374, 0x374, False, "n04523525", "vault"),
                labels.classification_label(0x375, 0x375, 0x375, False, "n04525038", "velvet"),
                labels.classification_label(0x376, 0x376, 0x376, False, "n04525305", "vending_machine"),
                labels.classification_label(0x377, 0x377, 0x377, False, "n04532106", "vestment"),
                labels.classification_label(0x378, 0x378, 0x378, False, "n04532670", "viaduct"),
                labels.classification_label(0x379, 0x379, 0x379, False, "n04536866", "violin"),
                labels.classification_label(0x37A, 0x37A, 0x37A, False, "n04540053", "volleyball"),
                labels.classification_label(0x37B, 0x37B, 0x37B, False, "n04542943", "waffle_iron"),
                labels.classification_label(0x37C, 0x37C, 0x37C, False, "n04548280", "wall_clock"),
                labels.classification_label(0x37D, 0x37D, 0x37D, False, "n04548362", "wallet"),
                labels.classification_label(0x37E, 0x37E, 0x37E, False, "n04550184", "wardrobe"),
                labels.classification_label(0x37F, 0x37F, 0x37F, False, "n04552348", "warplane"),
                labels.classification_label(0x380, 0x380, 0x380, False, "n04553703", "washbasin"),
                labels.classification_label(0x381, 0x381, 0x381, False, "n04554684", "washer"),
                labels.classification_label(0x382, 0x382, 0x382, False, "n04557648", "water_bottle"),
                labels.classification_label(0x383, 0x383, 0x383, False, "n04560804", "water_jug"),
                labels.classification_label(0x384, 0x384, 0x384, False, "n04562935", "water_tower"),
                labels.classification_label(0x385, 0x385, 0x385, False, "n04579145", "whiskey_jug"),
                labels.classification_label(0x386, 0x386, 0x386, False, "n04579432", "whistle"),
                labels.classification_label(0x387, 0x387, 0x387, False, "n04584207", "wig"),
                labels.classification_label(0x388, 0x388, 0x388, False, "n04589890", "window_screen"),
                labels.classification_label(0x389, 0x389, 0x389, False, "n04590129", "window_shade"),
                labels.classification_label(0x38A, 0x38A, 0x38A, False, "n04591157", "Windsor_tie"),
                labels.classification_label(0x38B, 0x38B, 0x38B, False, "n04591713", "wine_bottle"),
                labels.classification_label(0x38C, 0x38C, 0x38C, False, "n04592741", "wing"),
                labels.classification_label(0x38D, 0x38D, 0x38D, False, "n04596742", "wok"),
                labels.classification_label(0x38E, 0x38E, 0x38E, False, "n04597913", "wooden_spoon"),
                labels.classification_label(0x38F, 0x38F, 0x38F, False, "n04599235", "wool"),
                labels.classification_label(0x390, 0x390, 0x390, False, "n04604644", "worm_fence"),
                labels.classification_label(0x391, 0x391, 0x391, False, "n04606251", "wreck"),
                labels.classification_label(0x392, 0x392, 0x392, False, "n04612504", "yawl"),
                labels.classification_label(0x393, 0x393, 0x393, False, "n04613696", "yurt"),
                labels.classification_label(0x394, 0x394, 0x394, False, "n06359193", "web_site"),
                labels.classification_label(0x395, 0x395, 0x395, False, "n06596364", "comic_book"),
                labels.classification_label(0x396, 0x396, 0x396, False, "n06785654", "crossword_puzzle"),
                labels.classification_label(0x397, 0x397, 0x397, False, "n06794110", "street_sign"),
                labels.classification_label(0x398, 0x398, 0x398, False, "n06874185", "traffic_light"),
                labels.classification_label(0x399, 0x399, 0x399, False, "n07248320", "book_jacket"),
                labels.classification_label(0x39A, 0x39A, 0x39A, False, "n07565083", "menu"),
                labels.classification_label(0x39B, 0x39B, 0x39B, False, "n07579787", "plate"),
                labels.classification_label(0x39C, 0x39C, 0x39C, False, "n07583066", "guacamole"),
                labels.classification_label(0x39D, 0x39D, 0x39D, False, "n07584110", "consomme"),
                labels.classification_label(0x39E, 0x39E, 0x39E, False, "n07590611", "hot_pot"),
                labels.classification_label(0x39F, 0x39F, 0x39F, False, "n07613480", "trifle"),
                labels.classification_label(0x3A0, 0x3A0, 0x3A0, False, "n07614500", "ice_cream"),
                labels.classification_label(0x3A1, 0x3A1, 0x3A1, False, "n07615774", "ice_lolly"),
                labels.classification_label(0x3A2, 0x3A2, 0x3A2, False, "n07684084", "French_loaf"),
                labels.classification_label(0x3A3, 0x3A3, 0x3A3, False, "n07693725", "bagel"),
                labels.classification_label(0x3A4, 0x3A4, 0x3A4, False, "n07695742", "pretzel"),
                labels.classification_label(0x3A5, 0x3A5, 0x3A5, False, "n07697313", "cheeseburger"),
                labels.classification_label(0x3A6, 0x3A6, 0x3A6, False, "n07697537", "hotdog"),
                labels.classification_label(0x3A7, 0x3A7, 0x3A7, False, "n07711569", "mashed_potato"),
                labels.classification_label(0x3A8, 0x3A8, 0x3A8, False, "n07714571", "head_cabbage"),
                labels.classification_label(0x3A9, 0x3A9, 0x3A9, False, "n07714990", "broccoli"),
                labels.classification_label(0x3AA, 0x3AA, 0x3AA, False, "n07715103", "cauliflower"),
                labels.classification_label(0x3AB, 0x3AB, 0x3AB, False, "n07716358", "zucchini"),
                labels.classification_label(0x3AC, 0x3AC, 0x3AC, False, "n07716906", "spaghetti_squash"),
                labels.classification_label(0x3AD, 0x3AD, 0x3AD, False, "n07717410", "acorn_squash"),
                labels.classification_label(0x3AE, 0x3AE, 0x3AE, False, "n07717556", "butternut_squash"),
                labels.classification_label(0x3AF, 0x3AF, 0x3AF, False, "n07718472", "cucumber"),
                labels.classification_label(0x3B0, 0x3B0, 0x3B0, False, "n07718747", "artichoke"),
                labels.classification_label(0x3B1, 0x3B1, 0x3B1, False, "n07720875", "bell_pepper"),
                labels.classification_label(0x3B2, 0x3B2, 0x3B2, False, "n07730033", "cardoon"),
                labels.classification_label(0x3B3, 0x3B3, 0x3B3, False, "n07734744", "mushroom"),
                labels.classification_label(0x3B4, 0x3B4, 0x3B4, False, "n07742313", "Granny_Smith"),
                labels.classification_label(0x3B5, 0x3B5, 0x3B5, False, "n07745940", "strawberry"),
                labels.classification_label(0x3B6, 0x3B6, 0x3B6, False, "n07747607", "orange"),
                labels.classification_label(0x3B7, 0x3B7, 0x3B7, False, "n07749582", "lemon"),
                labels.classification_label(0x3B8, 0x3B8, 0x3B8, False, "n07753113", "fig"),
                labels.classification_label(0x3B9, 0x3B9, 0x3B9, False, "n07753275", "pineapple"),
                labels.classification_label(0x3BA, 0x3BA, 0x3BA, False, "n07753592", "banana"),
                labels.classification_label(0x3BB, 0x3BB, 0x3BB, False, "n07754684", "jackfruit"),
                labels.classification_label(0x3BC, 0x3BC, 0x3BC, False, "n07760859", "custard_apple"),
                labels.classification_label(0x3BD, 0x3BD, 0x3BD, False, "n07768694", "pomegranate"),
                labels.classification_label(0x3BE, 0x3BE, 0x3BE, False, "n07802026", "hay"),
                labels.classification_label(0x3BF, 0x3BF, 0x3BF, False, "n07831146", "carbonara"),
                labels.classification_label(0x3C0, 0x3C0, 0x3C0, False, "n07836838", "chocolate_sauce"),
                labels.classification_label(0x3C1, 0x3C1, 0x3C1, False, "n07860988", "dough"),
                labels.classification_label(0x3C2, 0x3C2, 0x3C2, False, "n07871810", "meat_loaf"),
                labels.classification_label(0x3C3, 0x3C3, 0x3C3, False, "n07873807", "pizza"),
                labels.classification_label(0x3C4, 0x3C4, 0x3C4, False, "n07875152", "potpie"),
                labels.classification_label(0x3C5, 0x3C5, 0x3C5, False, "n07880968", "burrito"),
                labels.classification_label(0x3C6, 0x3C6, 0x3C6, False, "n07892512", "red_wine"),
                labels.classification_label(0x3C7, 0x3C7, 0x3C7, False, "n07920052", "espresso"),
                labels.classification_label(0x3C8, 0x3C8, 0x3C8, False, "n07930864", "cup"),
                labels.classification_label(0x3C9, 0x3C9, 0x3C9, False, "n07932039", "eggnog"),
                labels.classification_label(0x3CA, 0x3CA, 0x3CA, False, "n09193705", "alp"),
                labels.classification_label(0x3CB, 0x3CB, 0x3CB, False, "n09229709", "bubble"),
                labels.classification_label(0x3CC, 0x3CC, 0x3CC, False, "n09246464", "cliff"),
                labels.classification_label(0x3CD, 0x3CD, 0x3CD, False, "n09256479", "coral_reef"),
                labels.classification_label(0x3CE, 0x3CE, 0x3CE, False, "n09288635", "geyser"),
                labels.classification_label(0x3CF, 0x3CF, 0x3CF, False, "n09332890", "lakeside"),
                labels.classification_label(0x3D0, 0x3D0, 0x3D0, False, "n09399592", "promontory"),
                labels.classification_label(0x3D1, 0x3D1, 0x3D1, False, "n09421951", "sandbar"),
                labels.classification_label(0x3D2, 0x3D2, 0x3D2, False, "n09428293", "seashore"),
                labels.classification_label(0x3D3, 0x3D3, 0x3D3, False, "n09468604", "valley"),
                labels.classification_label(0x3D4, 0x3D4, 0x3D4, False, "n09472597", "volcano"),
                labels.classification_label(0x3D5, 0x3D5, 0x3D5, False, "n09835506", "ballplayer"),
                labels.classification_label(0x3D6, 0x3D6, 0x3D6, False, "n10148035", "groom"),
                labels.classification_label(0x3D7, 0x3D7, 0x3D7, False, "n10565667", "scuba_diver"),
                labels.classification_label(0x3D8, 0x3D8, 0x3D8, False, "n11879895", "rapeseed"),
                labels.classification_label(0x3D9, 0x3D9, 0x3D9, False, "n11939491", "daisy"),
                labels.classification_label(0x3DA, 0x3DA, 0x3DA, False, "n12057211", "yellow_lady's_slipper"),
                labels.classification_label(0x3DB, 0x3DB, 0x3DB, False, "n12144580", "corn"),
                labels.classification_label(0x3DC, 0x3DC, 0x3DC, False, "n12267677", "acorn"),
                labels.classification_label(0x3DD, 0x3DD, 0x3DD, False, "n12620546", "hip"),
                labels.classification_label(0x3DE, 0x3DE, 0x3DE, False, "n12768682", "buckeye"),
                labels.classification_label(0x3DF, 0x3DF, 0x3DF, False, "n12985857", "coral_fungus"),
                labels.classification_label(0x3E0, 0x3E0, 0x3E0, False, "n12998815", "agaric"),
                labels.classification_label(0x3E1, 0x3E1, 0x3E1, False, "n13037406", "gyromitra"),
                labels.classification_label(0x3E2, 0x3E2, 0x3E2, False, "n13040303", "stinkhorn"),
                labels.classification_label(0x3E3, 0x3E3, 0x3E3, False, "n13044778", "earthstar"),
                labels.classification_label(0x3E4, 0x3E4, 0x3E4, False, "n13052670", "hen-of-the-woods"),
                labels.classification_label(0x3E5, 0x3E5, 0x3E5, False, "n13054560", "bolete"),
                labels.classification_label(0x3E6, 0x3E6, 0x3E6, False, "n13133613", "ear"),
                labels.classification_label(0x3E7, 0x3E7, 0x3E7, False, "n15075141", "toilet_tissue")]
        }
        Label_category: Dict[label_style, List[str]] = {}

        def __init__(self, label_style: label_style, file_style: file_style, data_size) -> None:
            self.Lable_name = "imagenet_1k"
            super().__init__(label_style, file_style, data_size)

        def get_label_list(self):
            if self.learning_mode == label_style.CLASSIFICATION:
                data = _base.file._json()

        def get_data_directory(self) -> str:
            return self.Directory[self.label_style]

        def work(self, data_list, index):
            return super().work(data_list, index)

    class Imagenet_22k(label_basement):
        ...

    class BDD_100k(label_basement):
        Directory: Dict[label_style, str] = {}
        Label_list: Dict[label_style, List[label]] = {}
        Label_category: Dict[label_style, List[str]] = {}

        label_: Dict[str, Union[Dict, str, label]] = {
            "directory": {
                "seg": {
                    "color_map": {
                        "input_dir": "images/10k/{}/",  # data_type
                        "label_dir": "labels/sem_seg/colormaps/{}/"}
                },
                "100k": {
                    "color_map": {
                        "input_dir": "images/100k/{}/"}
                }
            },
            "list": {   # "id", "train_id", "categoryId", "hasInstances", "ignoreInEval", "color", "name"
                "seg": [
                    label(0x00, 0xFF, 0x00, 0x00, 0x01, _numpy.np_base.get_array_from([0x00, 0x00, 0x00]), "unlabeled"),
                    label(0x01, 0xFF, 0x00, 0x00, 0x01, _numpy.np_base.get_array_from([0x00, 0x4A, 0x6F]), "dynamic"),
                    label(0x02, 0xFF, 0x00, 0x00, 0x01, _numpy.np_base.get_array_from([0x00, 0x00, 0x00]), "ego vehicle"),
                    label(0x03, 0xFF, 0x00, 0x00, 0x01, _numpy.np_base.get_array_from([0x51, 0x00, 0x51]), "ground"),
                    label(0x04, 0xFF, 0x00, 0x00, 0x01, _numpy.np_base.get_array_from([0x00, 0x00, 0x00]), "static"),
                    label(0x05, 0xFF, 0x01, 0x00, 0x01, _numpy.np_base.get_array_from([0xA0, 0xAA, 0xFA]), "parking"),
                    label(0x06, 0xFF, 0x01, 0x00, 0x01, _numpy.np_base.get_array_from([0x8C, 0x96, 0xE6]), "rail track"),
                    label(0x07, 0x00, 0x01, 0x00, 0x00, _numpy.np_base.get_array_from([0x80, 0x40, 0x80]), "road"),
                    label(0x08, 0x01, 0x01, 0x00, 0x00, _numpy.np_base.get_array_from([0xE8, 0x23, 0xF4]), "sidewalk"),
                    label(0x09, 0xFF, 0x02, 0x00, 0x01, _numpy.np_base.get_array_from([0x64, 0x64, 0x96]), "bridge"),
                    label(0x0A, 0x02, 0x02, 0x00, 0x00, _numpy.np_base.get_array_from([0x46, 0x46, 0x46]), "building"),
                    label(0x0B, 0x04, 0x02, 0x00, 0x00, _numpy.np_base.get_array_from([0x99, 0x99, 0xBE]), "fence"),
                    label(0x0C, 0xFF, 0x02, 0x00, 0x01, _numpy.np_base.get_array_from([0xB4, 0x64, 0xB4]), "garage"),
                    label(0x0D, 0xFF, 0x02, 0x00, 0x01, _numpy.np_base.get_array_from([0xB4, 0xA5, 0xB4]), "guard rail"),
                    label(0x0E, 0xFF, 0x02, 0x00, 0x01, _numpy.np_base.get_array_from([0x5A, 0x78, 0x96]), "tunnel"),
                    label(0x0F, 0x03, 0x02, 0x00, 0x00, _numpy.np_base.get_array_from([0x9C, 0x66, 0x66]), "wall"),
                    label(0x10, 0xFF, 0x03, 0x00, 0x01, _numpy.np_base.get_array_from([0x64, 0xAA, 0xFA]), "banner"),
                    label(0x11, 0xFF, 0x03, 0x00, 0x01, _numpy.np_base.get_array_from([0xFA, 0xDC, 0xDC]), "billboard"),
                    label(0x12, 0xFF, 0x03, 0x00, 0x01, _numpy.np_base.get_array_from([0x00, 0xA5, 0xFF]), "lane divider"),
                    label(0x13, 0xFF, 0x03, 0x00, 0x00, _numpy.np_base.get_array_from([0x3C, 0x14, 0xDC]), "parking sign"),
                    label(0x14, 0x05, 0x03, 0x00, 0x00, _numpy.np_base.get_array_from([0x99, 0x99, 0x99]), "pole"),
                    label(0x15, 0xFF, 0x03, 0x00, 0x01, _numpy.np_base.get_array_from([0x99, 0x99, 0x99]), "polegroup"),
                    label(0x16, 0xFF, 0x03, 0x00, 0x01, _numpy.np_base.get_array_from([0x64, 0xDC, 0xDC]), "street light"),
                    label(0x17, 0xFF, 0x03, 0x00, 0x01, _numpy.np_base.get_array_from([0x00, 0x46, 0xFF]), "traffic cone"),
                    label(0x18, 0xFF, 0x03, 0x00, 0x01, _numpy.np_base.get_array_from([0xDC, 0xDC, 0xDC]), "traffic device"),
                    label(0x19, 0x06, 0x03, 0x00, 0x00, _numpy.np_base.get_array_from([0x1E, 0xAA, 0xFA]), "traffic light"),
                    label(0x1A, 0x07, 0x03, 0x00, 0x00, _numpy.np_base.get_array_from([0x00, 0xDC, 0xDC]), "traffic sign"),
                    label(0x1B, 0xFF, 0x03, 0x00, 0x01, _numpy.np_base.get_array_from([0xFA, 0xAA, 0xFA]), "traffic sign frame"),
                    label(0x1C, 0x09, 0x04, 0x00, 0x00, _numpy.np_base.get_array_from([0x98, 0xFB, 0x98]), "terrain"),
                    label(0x1D, 0x08, 0x04, 0x00, 0x00, _numpy.np_base.get_array_from([0x23, 0x8E, 0x6B]), "vegetation"),
                    label(0x1E, 0x0A, 0x05, 0x00, 0x00, _numpy.np_base.get_array_from([0xB4, 0x82, 0x46]), "sky"),
                    label(0x1F, 0x0B, 0x06, 0x01, 0x00, _numpy.np_base.get_array_from([0x3C, 0x14, 0xDC]), "person"),
                    label(0x20, 0x0C, 0x06, 0x01, 0x00, _numpy.np_base.get_array_from([0x00, 0x00, 0xFF]), "rider"),
                    label(0x21, 0x12, 0x07, 0x01, 0x00, _numpy.np_base.get_array_from([0x20, 0x0B, 0x77]), "bicycle"),
                    label(0x22, 0x0F, 0x07, 0x01, 0x00, _numpy.np_base.get_array_from([0x64, 0x3C, 0x00]), "bus"),
                    label(0x23, 0x0D, 0x07, 0x01, 0x00, _numpy.np_base.get_array_from([0x8E, 0x00, 0x00]), "car"),
                    label(0x24, 0xFF, 0x07, 0x01, 0x01, _numpy.np_base.get_array_from([0x5A, 0x00, 0x00]), "caravan"),
                    label(0x25, 0x11, 0x07, 0x01, 0x00, _numpy.np_base.get_array_from([0xE6, 0x00, 0x00]), "motorcycle"),
                    label(0x26, 0xFF, 0x07, 0x01, 0x01, _numpy.np_base.get_array_from([0x6E, 0x00, 0x00]), "trailer"),
                    label(0x27, 0x10, 0x07, 0x01, 0x00, _numpy.np_base.get_array_from([0x64, 0x50, 0x00]), "train"),
                    label(0x28, 0x0E, 0x07, 0x01, 0x00, _numpy.np_base.get_array_from([0x46, 0x00, 0x00]), "truck")]
            },
            "category": {
                "seg": ["void", "flat", "construction", "object", "nature", "sky", "human", "vehicle"]
            }
        }

        def __init__(self, label_style, file_style) -> None:
            super().__init__(label_style, file_style)

        def get_data_directory(self, learning_style: str):
            pass

        def make_data(self, file_list: List[str], index, data_size):
            pass

    class CDnet():
        label_ = {
            "directory": {
                "seg": {
                }
            },
            "list": {   # "id", "train_id", "categoryId", "hasInstances", "ignoreInEval", "color", "name"
                "seg": [
                    label(0x00, 0x00, 0x01, 0x00, 0x00, [0x10, 0x10, 0x10], "Static"),
                    label(0x01, 0x00, 0x00, 0x00, 0x00, [0x32, 0x32, 0x32], "Hard shadow"),
                    label(0x02, 0xFF, 0x00, 0x00, 0x01, [0x55, 0x55, 0x55], "Outside region of interest"),
                    label(0x03, 0x01, 0x00, 0x00, 0x00, [0xAA, 0xAA, 0xAA], "Unknown motion"),
                    label(0x04, 0x02, 0x01, 0x00, 0x00, [0xFF, 0xFF, 0xFF], "Motion")]
            },
            "category": {
                "seg": ["void", "flat", "construction", "object", "nature", "sky", "human", "vehicle"]
            }
        }

        def __init__(self) -> None:
            pass

    class COCO():
        def __init__(self) -> None:
            pass
